__NUXT_JSONP__("/blog/2016-02-21-automated-testing", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q){return {data:[{page:{slug:"2016-02-21-automated-testing",title:z,date:"2016-02-21",tags:[A,"julia","travis","coveralls","github"],toc:[{id:B,depth:v,text:C},{id:D,depth:v,text:E},{id:F,depth:v,text:G},{id:H,depth:v,text:I},{id:J,depth:v,text:K}],body:{type:"root",children:[{type:b,tag:"h1",props:{id:"automated-testing"},children:[{type:b,tag:l,props:{href:"#automated-testing",ariaHidden:m,tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We're gonna learn how to make a test for your Julia code that runs whenever you\npublish it online. We're gonna use"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{href:"http:\u002F\u002Fgithub.com",rel:[r,s,t],target:u},children:[{type:a,value:"GitHub"}]},{type:a,value:" to store the code;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{href:"http:\u002F\u002Ftravis-ci.com",rel:[r,s,t],target:u},children:[{type:a,value:"Travis CI"}]},{type:a,value:" to run your tests;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{href:"http:\u002F\u002Fcoveralls.io",rel:[r,s,t],target:u},children:[{type:a,value:"Coveralls.io"}]},{type:a,value:" to verify which lines of code your test are missing."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Alternatively, for a open source alternative, see "},{type:b,tag:l,props:{href:"http:\u002F\u002Fgitlab.com",rel:[r,s,t],target:u},children:[{type:a,value:"GitLab"}]},{type:a,value:",\nwhich I don't know enough yet."}]},{type:a,value:c},{type:b,tag:"hr",props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Let's make a litte code to solve a linear system, paying attention to the\nproblems it may arise, like incorrect dimensions, underdetermined and\noverdetermined systems, singular matrices, etc.\nAnd we'll be using the factorizations, but not "},{type:b,tag:e,props:{},children:[{type:a,value:"\\"}]},{type:a,value:L}]},{type:a,value:c},{type:b,tag:w,props:{id:B},children:[{type:b,tag:l,props:{href:"#the-math",ariaHidden:m,tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"A simple (not cheap) way to do it is using Singular Value Decomposition (SVD).\nWe have"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$$\nA = U\\Sigma V^T = \\sum_{i=1}^r \\sigma_i u_i v_i^T.\n$$"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"where $r$ is the rank of $A$.\nSince the columns of $V$ form a basis for $\\mathbb{R}^n$ (where $x$ resides),\nthen"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$$\nx = \\sum_{j=1}^n \\alpha_j v_j.\n$$"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now, we have"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$$\nAx = \\sum_{i=1}^r \\sum_{j=1}^n \\sigma_i \\alpha_j u_i v_i^Tv_j\n= \\sum_{i=1}^r \\sigma_i \\alpha_i u_i\n$$"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If the system has a solution, that is $Ax = b$, then we multiply by $u_j^T$,\nobtaining"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$$\nu_j^TAx = \\sum_{i=1}^r \\sigma_i \\alpha_i u_j^Tu_i\n= \\sigma_j\\alpha_j = u_j^Tb\n$$"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Thus, $ \\alpha_j = \\dfrac{u_j^Tb}{\\sigma_j} $.\nIf the system doesn't have a solution, this still holds. I'll leave the steps to\nyou."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If $r \u003C n$, then $\\alpha$ has undetermined values. However, when that's the\ncase, the solution we'll use is the one with the smallest norm, that is, the one\nthat minimizes $\\Vert x\\Vert$.\nSince $v_i$ are orthonormal, then\n$$ \\Vert x\\Vert^2 = \\sum_{i=1}^n \\alpha_i^2.$$\nSo, in order to minimize the norm of x, we use $\\alpha_i = 0$ for $i \u003E r$."}]},{type:a,value:c},{type:b,tag:w,props:{id:D},children:[{type:b,tag:l,props:{href:"#the-code",ariaHidden:m,tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We'll store the code on\n"},{type:b,tag:l,props:{href:"http:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FBlogAutomatedTesting.jl",rel:[r,s,t],target:u},children:[{type:a,value:"this"}]},{type:a,value:" GitHub\nrepository.\nNote, however, that it will point to the completed version."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"A possible implementation of our code is as follows:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002Fsolve_linear.jl\n{% include_relative {{ page.name }}\u002Fsolve_linear1.jl %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To test it, open julia on the root folder and do"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"julia\u003E A = rand(5,5); b = rand(5)\njulia\u003E include(\"src\u002Fsolve_linear.jl\")\njulia\u003E norm(linear_system(A,b) - A\\b)\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If the result is around $10^{-16}$, then everything went well.\nVery rarely, the generated matrix could be ill-conditioned.\nRun again, to verify if that's the case."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If everything went well, we'll write a test now."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"For now, let's write a simple test running a lot of square linear systems.\nFor each system, to avoid using "},{type:b,tag:e,props:{},children:[{type:a,value:"A\\b"}]},{type:a,value:", we'll create a vector "},{type:b,tag:e,props:{},children:[{type:a,value:"b"}]},{type:a,value:" from a known\nsolution. Then we'll "},{type:b,tag:M,props:{},children:[{type:a,value:"assure"}]},{type:a,value:" that $\\Vert Ax-b\\Vert \u003C \\epsilon$\nand $\\Vert x-e\\Vert \u003C \\epsilon$.\nTo do that, we'll use "},{type:b,tag:e,props:{},children:[{type:a,value:"Base.Test"}]},{type:a,value:".\nNote however, that the condition of the matrix influences the error, and there\nare numerical errors involved. So we'll use the condition\n$$\\Vert x-e\\Vert \u003C 10^{-12} \\text{cond}(A).$$\nThe code is"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file test\u002Ftest1.jl\n{% include_relative {{ page.name }}\u002Ftest1.jl %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Run with"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"$ julia test\u002Ftest1.jl\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Nothing should appear."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The first line is a kludge to read the correct file from wherever the run the\ncode. If you're not building a module, this is ok. But normally you'll want to\nbuild a module. Ignore that for now.\nThe first for varies the dimension, and the second for runs the code a specific\nnumber of times.\nThis totals a hundred square linear systems being run.\nThe "},{type:b,tag:e,props:{},children:[{type:a,value:"@test"}]},{type:a,value:" macro verifies that the given expression is true.\nIf any solution is wrong, the code will be wrong. Also, if you use a smaller\ntolerance, the numerical rounding may give a error here."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Ok, first thing you wanna do now is commit this code."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"$ git init\n$ git add src test\n$ git commit -m 'First commit'\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Then, go to GitHub, create an account, then a repository for this code (e.g.\nlinear_system.jl), then push the code.\n"},{type:b,tag:M,props:{},children:[{type:a,value:"Use the name with .jl in the end for the repository."}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"$ git add origin http:\u002F\u002Flink\u002Fto\u002Fyour\u002Fgithub\u002Frepository\u002F\n$ git push -u origin master\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Enter your password and verify the code is online."}]},{type:a,value:c},{type:b,tag:w,props:{id:F},children:[{type:b,tag:l,props:{href:"#online-testing",ariaHidden:m,tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now go to Travis and create an account. Go to your profile and\nclick on the "},{type:b,tag:e,props:{},children:[{type:a,value:"Sync account"}]},{type:a,value:" button if necessary.\nFind your repository and set the button to on.\nNow, with the next commit, a test will start. Let's make it happen."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Create a file "},{type:b,tag:e,props:{},children:[{type:a,value:x}]},{type:a,value:" (yes, with a leading dot) with information for the\nbuild. Here's a simple file:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file .travis.yml\n{% include_relative {{ page.name }}\u002Ftravis1.yml %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Include the file and push"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"$ git add .travis.yml\n$ git commit -m 'Add .travis.yml'\n$ git push\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now, go to your travis page, and after a while you'll see your repository with a\ntest running (or already finished, because it is short).\nYou should have a passing test. If not, verify your files again, then the error\non travis.\nNotice that you can see the complete log of what is run."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Using an online automated testing is useful for many reasons:"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Everyone can see if the code is working;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Pull requests generate a travis build, so you can see if it's working;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"You don't forget to test;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"You test on a clean environment;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"You can test with multiple versions of Julia (or other linguage)."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:w,props:{id:H},children:[{type:b,tag:l,props:{href:"#coverage",ariaHidden:m,tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now, let's see the code coverage.\nFirst, for coverage you'll need a package to see the coverage, and the service\nto publish the coverage."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Use "},{type:b,tag:l,props:{href:"https:\u002F\u002Fgithub.com\u002FJuliaCI\u002FCoverage.jl",rel:[r,s,t],target:u},children:[{type:a,value:"Coverage.jl"}]},{type:a,value:" to see your coverage\n(including locally).\nInstall with"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"julia\u003E Pkg.add(\"Coverage\")\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Then run"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"$ julia --code-coverage=user --inline=no test\u002Ftest1.jl\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This will generate a file "},{type:b,tag:e,props:{},children:[{type:a,value:"src\u002Fsolve_linear.jl.xxx.cov"}]},{type:a,value:" with the information.\nThe option "},{type:b,tag:e,props:{},children:[{type:a,value:"--inline=no"}]},{type:a,value:" gives more accurate results, but slow down the code.\nYou can see which function are not being run by reading it, but it's better to\nsee it online."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To see a summary, use"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"julia\u003E using Coverage\njulia\u003E cov = process_folder()\njulia\u003E c, t = get_summary(cov)\njulia\u003E println(\"$(100c\u002Ft)% of lines covered\")\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"But we want to see it online. So go to Coveralls.io and create an account.\nClick on "},{type:b,tag:e,props:{},children:[{type:a,value:"Add repos"}]},{type:a,value:" and find you repository.\nEnable it, and change the "},{type:b,tag:e,props:{},children:[{type:a,value:x}]},{type:a,value:" file to"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file .travis.yml\n{% include_relative {{ page.name }}\u002Ftravis2.yml %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"After a success, we install Coverage and run the relevant code.\nCheck your repository on Coveralls to see the results.\nNotice how the "},{type:b,tag:e,props:{},children:[{type:a,value:"error"}]},{type:a,value:" line on our code never gets called."}]},{type:a,value:c},{type:b,tag:w,props:{id:J},children:[{type:b,tag:l,props:{href:"#improving-to-a-module",ariaHidden:m,tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:K}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If you want people to use your code, you should use a module in Julia.\nThis allows easy installation of your code, and not much more work.\nChanging to a module is very simple, so I'll run through it.\nThe folders "},{type:b,tag:e,props:{},children:[{type:a,value:"src"}]},{type:a,value:" and "},{type:b,tag:e,props:{},children:[{type:a,value:A}]},{type:a,value:" are required. But we also need"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"A file in src with the same name as the repository;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"The keyword "},{type:b,tag:e,props:{},children:[{type:a,value:"module"}]},{type:a,value:" on that file;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"export"}]},{type:a,value:" the relevant functions;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"A file "},{type:b,tag:e,props:{},children:[{type:a,value:"test\u002Fruntests.jl"}]},{type:a,value:" that run the tests;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:N},{type:b,tag:e,props:{},children:[{type:a,value:O}]},{type:a,value:" for people to know about your thing;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:N},{type:b,tag:e,props:{},children:[{type:a,value:P}]},{type:a,value:" for people to know what they can do with your file;"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Different "},{type:b,tag:e,props:{},children:[{type:a,value:x}]},{type:a,value:L}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I'm using the name "},{type:b,tag:e,props:{},children:[{type:a,value:"BlogAutomatedTesting.jl"}]},{type:a,value:", so a create the file"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file src\u002FBlogAutomatedTesting.jl\n{% include_relative {{ page.name }}\u002Fmain.jl %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I edit the file"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file src\u002Fsolve_linear.jl\n{% include_relative {{ page.name }}\u002Fsolve_linear2.jl %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Then file"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file test\u002Fruntests.jl\ninclude(\"test1.jl\")\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"and"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file test\u002Ftest1.jl\n{% include_relative {{ page.name }}\u002Ftest12.jl %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"And create a "},{type:b,tag:e,props:{},children:[{type:a,value:O}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# BlogAutomatedTesting.jl\n\nThis package was created from the tutorial on\n[Abel Siqueira's blog]({{ site.url }}\u002F{{local_prefix}}{{ post.url }})\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The "},{type:b,tag:e,props:{},children:[{type:a,value:P}]},{type:a,value:" file is up which license you'll choose.\nSee "},{type:b,tag:l,props:{href:"choosealicense.com"},children:[{type:a,value:"this site"}]},{type:a,value:" for options.\nCopy the contents to the file."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now change "},{type:b,tag:e,props:{},children:[{type:a,value:x}]},{type:a,value:" to treat your code like a package."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# file .travis.yml\n{% include_relative {{ page.name }}\u002Ftravis3.yml %}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Commit and verify your update on Travis and Coveralls"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"$ git add .\n$ git commit -m 'Change to module'\n$ git push\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I hope this was helpful enough."}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002F2016-02-21-automated-testing",extension:".md",createdAt:Q,updatedAt:Q,bodyPlainText:"\n# Automated testing\n\nWe're gonna learn how to make a test for your Julia code that runs whenever you\npublish it online. We're gonna use\n\n- [GitHub](http:\u002F\u002Fgithub.com) to store the code;\n- [Travis CI](http:\u002F\u002Ftravis-ci.com) to run your tests;\n- [Coveralls.io](http:\u002F\u002Fcoveralls.io) to verify which lines of code your test are missing.\n\nAlternatively, for a open source alternative, see [GitLab](http:\u002F\u002Fgitlab.com),\nwhich I don't know enough yet.\n\n---\n\nLet's make a litte code to solve a linear system, paying attention to the\nproblems it may arise, like incorrect dimensions, underdetermined and\noverdetermined systems, singular matrices, etc.\nAnd we'll be using the factorizations, but not `\\`.\n\n## The math\n\nA simple (not cheap) way to do it is using Singular Value Decomposition (SVD).\nWe have\n\n$$\n  A = U\\Sigma V^T = \\sum_{i=1}^r \\sigma_i u_i v_i^T.\n$$\n\nwhere $r$ is the rank of $A$.\nSince the columns of $V$ form a basis for $\\mathbb{R}^n$ (where $x$ resides),\nthen\n\n$$\n  x = \\sum_{j=1}^n \\alpha_j v_j.\n$$\n\nNow, we have\n\n$$\n  Ax = \\sum_{i=1}^r \\sum_{j=1}^n \\sigma_i \\alpha_j u_i v_i^Tv_j\n     = \\sum_{i=1}^r \\sigma_i \\alpha_i u_i\n$$\n\nIf the system has a solution, that is $Ax = b$, then we multiply by $u_j^T$,\nobtaining\n\n$$\n  u_j^TAx = \\sum_{i=1}^r \\sigma_i \\alpha_i u_j^Tu_i\n          = \\sigma_j\\alpha_j = u_j^Tb\n$$\n\nThus, $ \\alpha_j = \\dfrac{u_j^Tb}{\\sigma_j} $.\nIf the system doesn't have a solution, this still holds. I'll leave the steps to\nyou.\n\nIf $r \u003C n$, then $\\alpha$ has undetermined values. However, when that's the\ncase, the solution we'll use is the one with the smallest norm, that is, the one\nthat minimizes $\\Vert x\\Vert$.\nSince $v_i$ are orthonormal, then\n$$ \\Vert x\\Vert^2 = \\sum\\_{i=1}^n \\alpha_i^2.$$\nSo, in order to minimize the norm of x, we use $\\alpha_i = 0$ for $i \u003E r$.\n\n## The code\n\nWe'll store the code on\n[this](http:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FBlogAutomatedTesting.jl) GitHub\nrepository.\nNote, however, that it will point to the completed version.\n\nA possible implementation of our code is as follows:\n\n```\n# File src\u002Fsolve_linear.jl\n{% include_relative {{ page.name }}\u002Fsolve_linear1.jl %}\n```\n\nTo test it, open julia on the root folder and do\n\n```\njulia\u003E A = rand(5,5); b = rand(5)\njulia\u003E include(\"src\u002Fsolve_linear.jl\")\njulia\u003E norm(linear_system(A,b) - A\\b)\n```\n\nIf the result is around $10^{-16}$, then everything went well.\nVery rarely, the generated matrix could be ill-conditioned.\nRun again, to verify if that's the case.\n\nIf everything went well, we'll write a test now.\n\nFor now, let's write a simple test running a lot of square linear systems.\nFor each system, to avoid using `A\\b`, we'll create a vector `b` from a known\nsolution. Then we'll **assure** that $\\Vert Ax-b\\Vert \u003C \\epsilon$\nand $\\Vert x-e\\Vert \u003C \\epsilon$.\nTo do that, we'll use `Base.Test`.\nNote however, that the condition of the matrix influences the error, and there\nare numerical errors involved. So we'll use the condition\n$$\\Vert x-e\\Vert \u003C 10^{-12} \\text{cond}(A).$$\nThe code is\n\n```\n# file test\u002Ftest1.jl\n{% include_relative {{ page.name }}\u002Ftest1.jl %}\n```\n\nRun with\n\n```\n$ julia test\u002Ftest1.jl\n```\n\nNothing should appear.\n\nThe first line is a kludge to read the correct file from wherever the run the\ncode. If you're not building a module, this is ok. But normally you'll want to\nbuild a module. Ignore that for now.\nThe first for varies the dimension, and the second for runs the code a specific\nnumber of times.\nThis totals a hundred square linear systems being run.\nThe `@test` macro verifies that the given expression is true.\nIf any solution is wrong, the code will be wrong. Also, if you use a smaller\ntolerance, the numerical rounding may give a error here.\n\nOk, first thing you wanna do now is commit this code.\n\n```\n$ git init\n$ git add src test\n$ git commit -m 'First commit'\n```\n\nThen, go to GitHub, create an account, then a repository for this code (e.g.\nlinear_system.jl), then push the code.\n**Use the name with .jl in the end for the repository.**\n\n```\n$ git add origin http:\u002F\u002Flink\u002Fto\u002Fyour\u002Fgithub\u002Frepository\u002F\n$ git push -u origin master\n```\n\nEnter your password and verify the code is online.\n\n## Online testing\n\nNow go to Travis and create an account. Go to your profile and\nclick on the `Sync account` button if necessary.\nFind your repository and set the button to on.\nNow, with the next commit, a test will start. Let's make it happen.\n\nCreate a file `.travis.yml` (yes, with a leading dot) with information for the\nbuild. Here's a simple file:\n\n```\n# file .travis.yml\n{% include_relative {{ page.name }}\u002Ftravis1.yml %}\n```\n\nInclude the file and push\n\n```\n$ git add .travis.yml\n$ git commit -m 'Add .travis.yml'\n$ git push\n```\n\nNow, go to your travis page, and after a while you'll see your repository with a\ntest running (or already finished, because it is short).\nYou should have a passing test. If not, verify your files again, then the error\non travis.\nNotice that you can see the complete log of what is run.\n\nUsing an online automated testing is useful for many reasons:\n\n- Everyone can see if the code is working;\n- Pull requests generate a travis build, so you can see if it's working;\n- You don't forget to test;\n- You test on a clean environment;\n- You can test with multiple versions of Julia (or other linguage).\n\n## Coverage\n\nNow, let's see the code coverage.\nFirst, for coverage you'll need a package to see the coverage, and the service\nto publish the coverage.\n\nUse [Coverage.jl](https:\u002F\u002Fgithub.com\u002FJuliaCI\u002FCoverage.jl) to see your coverage\n(including locally).\nInstall with\n\n```\njulia\u003E Pkg.add(\"Coverage\")\n```\n\nThen run\n\n```\n$ julia --code-coverage=user --inline=no test\u002Ftest1.jl\n```\n\nThis will generate a file `src\u002Fsolve_linear.jl.xxx.cov` with the information.\nThe option `--inline=no` gives more accurate results, but slow down the code.\nYou can see which function are not being run by reading it, but it's better to\nsee it online.\n\nTo see a summary, use\n\n```\njulia\u003E using Coverage\njulia\u003E cov = process_folder()\njulia\u003E c, t = get_summary(cov)\njulia\u003E println(\"$(100c\u002Ft)% of lines covered\")\n```\n\nBut we want to see it online. So go to Coveralls.io and create an account.\nClick on `Add repos` and find you repository.\nEnable it, and change the `.travis.yml` file to\n\n```\n# file .travis.yml\n{% include_relative {{ page.name }}\u002Ftravis2.yml %}\n```\n\nAfter a success, we install Coverage and run the relevant code.\nCheck your repository on Coveralls to see the results.\nNotice how the `error` line on our code never gets called.\n\n## Improving to a module\n\nIf you want people to use your code, you should use a module in Julia.\nThis allows easy installation of your code, and not much more work.\nChanging to a module is very simple, so I'll run through it.\nThe folders `src` and `test` are required. But we also need\n\n- A file in src with the same name as the repository;\n- The keyword `module` on that file;\n- `export` the relevant functions;\n- A file `test\u002Fruntests.jl` that run the tests;\n- A `README.md` for people to know about your thing;\n- A `LICENSE.md` for people to know what they can do with your file;\n- Different `.travis.yml`.\n\nI'm using the name `BlogAutomatedTesting.jl`, so a create the file\n\n```\n# file src\u002FBlogAutomatedTesting.jl\n{% include_relative {{ page.name }}\u002Fmain.jl %}\n```\n\nI edit the file\n\n```\n# file src\u002Fsolve_linear.jl\n{% include_relative {{ page.name }}\u002Fsolve_linear2.jl %}\n```\n\nThen file\n\n```\n# file test\u002Fruntests.jl\ninclude(\"test1.jl\")\n```\n\nand\n\n```\n# file test\u002Ftest1.jl\n{% include_relative {{ page.name }}\u002Ftest12.jl %}\n```\n\nAnd create a `README.md`\n\n```\n# BlogAutomatedTesting.jl\n\nThis package was created from the tutorial on\n[Abel Siqueira's blog]({{ site.url }}\u002F{{local_prefix}}{{ post.url }})\n```\n\nThe `LICENSE.md` file is up which license you'll choose.\nSee [this site](choosealicense.com) for options.\nCopy the contents to the file.\n\nNow change `.travis.yml` to treat your code like a package.\n\n```\n# file .travis.yml\n{% include_relative {{ page.name }}\u002Ftravis3.yml %}\n```\n\nCommit and verify your update on Travis and Coveralls\n\n```\n$ git add .\n$ git commit -m 'Change to module'\n$ git push\n```\n\nI hope this was helpful enough.\n"},prev:{slug:"2016-02-23-ubuntu-graphic-interface-stopped-working",title:"Ubuntu graphic interface stopped working"},next:{slug:"2016-02-14-viii-simposio-de-analise-numerica",title:"VIII Simpósio de Análise Numérica e Otimização - Minicurso de Julia"}}],fetch:{},mutations:void 0}}("text","element","\n","p","code","div","nuxt-content-highlight","pre","language-text","line-numbers","li","a","true",-1,"span","icon","icon-link","nofollow","noopener","noreferrer","_blank",2,"h2",".travis.yml","ul","Automated testing","test","the-math","The math","the-code","The code","online-testing","Online testing","coverage","Coverage","improving-to-a-module","Improving to a module",".","strong","A ","README.md","LICENSE.md","2022-12-23T17:39:35.597Z")));