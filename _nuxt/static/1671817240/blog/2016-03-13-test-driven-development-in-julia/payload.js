__NUXT_JSONP__("/blog/2016-03-13-test-driven-development-in-julia", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L){return {data:[{page:{slug:"2016-03-13-test-driven-development-in-julia",title:D,date:"2016-03-13",tags:["tdd",x],toc:[{id:x,depth:y,text:E},{id:F,depth:y,text:G},{id:H,depth:y,text:I}],body:{type:"root",children:[{type:b,tag:"h1",props:{id:"test-driven-development-in-julia"},children:[{type:b,tag:m,props:{href:"#test-driven-development-in-julia",ariaHidden:o,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"First, what is Test Driven Development (TDD)?\nWell, I'm not an expert, so don't quote me, but in practice it means that you\ndevelop your code to fulfill tests that you define prior to beginning your work.\nYou do not define "},{type:b,tag:l,props:{},children:[{type:a,value:J}]},{type:a,value:" your tests first, though. You define a single test,\nand produce code to pass it. Then you define another code, and produce code to\npass both. And so forth until you complete your specification."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This is good because:"}]},{type:a,value:c},{type:b,tag:z,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Wherever you stop, you know what is working."}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"When you finish, your code already has tests."}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:"http:\u002F\u002Fc2.com\u002Fcgi\u002Fwiki?PrematureOptimization",rel:[t,u,v],target:w},children:[{type:a,value:"You don't have to optimize prematurely."}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The steps of TDD can be described as "},{type:b,tag:m,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FTest-driven_development",rel:[t,u,v],target:w},children:[{type:a,value:"from\nWikipedia"}]}]},{type:a,value:c},{type:b,tag:"ol",props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"Add tests"}]},{type:a,value:": These should be useful, "},{type:b,tag:A,props:{},children:[{type:a,value:"and should fail"}]},{type:a,value:n}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:B}]},{type:a,value:": Verify that the test fails. If not, go back to 1."}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"Write code"}]},{type:a,value:": Write enough code to pass the test."}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:B}]},{type:a,value:": Verify that "},{type:b,tag:l,props:{},children:[{type:a,value:J}]},{type:a,value:" tests pass. If some of the tests fail, go back to 3."}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"Refactor"}]},{type:a,value:": Now that everything passes, make the code looks nicer. This is harder for non-seasoned programmers, because it's vague. Essentially, it means removing duplicate code, magic numbers, clarifying names, etc."}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:B}]},{type:a,value:": Again. Should be done during refactoring, to guarantee you're not breaking anything. But just to be very clear: "},{type:b,tag:A,props:{},children:[{type:a,value:"your tests should pass at the end of refactoring"}]},{type:a,value:n}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"Repeat"}]},{type:a,value:n}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This is one way of describing TDD, but there are other. Many others, by the way.\nIn fact, there are many images describing it, so you can print one and staple it\naround."}]},{type:a,value:c},{type:b,tag:C,props:{id:x},children:[{type:b,tag:m,props:{href:"#julia",ariaHidden:o,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"First, we are gonna follow the "},{type:b,tag:A,props:{},children:[{type:a,value:"package"}]},{type:a,value:" layout in Julia.\n"},{type:b,tag:m,props:{href:"%7B%7Blocal_prefix%7D%7D\u002Fautomated-testing\u002F"},children:[{type:a,value:"This post"}]},{type:a,value:" mentions it at the end.\nBasically, we need"}]},{type:a,value:c},{type:b,tag:z,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Folder PackageName.jl\n"},{type:b,tag:z,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:K},{type:b,tag:e,props:{},children:[{type:a,value:"src"}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"PackageName.jl"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:K},{type:b,tag:e,props:{},children:[{type:a,value:"test"}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"runtests.jl"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"README.md"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"LICENSE.md"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In our example, we're gonna write a program to convert Roman numbers to decimal,\nand vice-versa.\nThis was inspired by "},{type:b,tag:m,props:{href:"http:\u002F\u002Fcodingdojo.org\u002Fcgi-bin\u002Findex.pl?KataRomanNumerals",rel:[t,u,v],target:w},children:[{type:a,value:"this\nsite"}]},{type:a,value:n}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"Important: You should use git, but I'll skip it here"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Let's begin writing the outline of the project"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"mkdir RomanNumerals.jl\ncd RomanNumerals\nmkdir src test\n"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\nmodule RomanNumerals\n\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Fruntests.jl\nusing RomanNumerals\n\ninclude(\"test_digits.jl\")\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This defines the building blocks. Note that "},{type:b,tag:e,props:{},children:[{type:a,value:"test_digits.jl"}]},{type:a,value:" does not exist. We're\ngonna create it to test the individuals digits."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Our testing environment will consist of having a terminal open at all\ntimes at the root of this project. Our testing command will be"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"julia -L src\u002FRomanNumerals.jl test\u002Fruntests.jl\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"There are different ways to issue the same command, but this is locally good."}]},{type:a,value:c},{type:b,tag:C,props:{id:F},children:[{type:b,tag:m,props:{href:"#tests",ariaHidden:o,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Julia comes with a "},{type:b,tag:e,props:{},children:[{type:a,value:"Base.Test"}]},{type:a,value:" package, which is the least you should use.\nFor all basic things it is enough. It provides the "},{type:b,tag:e,props:{},children:[{type:a,value:"@test"}]},{type:a,value:" macro, which you can\nuse as"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"using Base.Test\n@test 1 == 1 # This will pass\n@test 1 == 0 # This will fail\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We're gonna go a step beyong and use\n"},{type:b,tag:m,props:{href:"https:\u002F\u002Fgithub.com\u002FJuliaLang\u002FFactCheck.jl",rel:[t,u,v],target:w},children:[{type:a,value:"FactCheck.jl"}]},{type:a,value:".\nThis provides more information about the tests."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We're gonna implement the function "},{type:b,tag:e,props:{},children:[{type:a,value:"roman_to_dec"}]},{type:a,value:" which receives a string with\nroman numerals and returns the decimal equivalent of the number.\nWith "},{type:b,tag:e,props:{},children:[{type:a,value:"FactCheck"}]},{type:a,value:", our first test will be"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Ftest_digits.jl\nusing FactCheck\n\nfacts(\"Testing digits\") do\n  @fact roman_to_dec(\"I\") --\u003E 1\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"When we run our test, we'll get"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"Testing digits\n  Error :: (line:-1)\n    Expression: roman_to_dec(\"I\") --\u003E 1\n    UndefVarError: roman_to_dec not defined\n      ...\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Look, "},{type:b,tag:e,props:{},children:[{type:a,value:"roman_to_dec not defined"}]},{type:a,value:". Well, let's define it."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\n...\nexport roman_to_dec\n\nfunction roman_to_dec(s)\nend\n...\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Running again, we get an even better message"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"Testing digits\n  Error :: (line:-1) :: fact was false\n    Expression: roman_to_dec(\"I\") --\u003E 1\n      Expected: 1\n      Occurred: nothing\nOut of 1 total fact:\n  Failed:   1\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Expected 1, nothing ocurred. Well, that's easy."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  return 1\nend\n...\n"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"Testing digits\n1 fact verified\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Done. We're successful. Rejoice. Back to work."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We've written a test, we've tested it, we've written code to fix it, we tested\nit. Not much to refactor, this is a silly example."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Repeat. Let's improve the tests."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  @fact roman_to_dec(\"I\") --\u003E 1\n  @fact roman_to_dec(\"V\") --\u003E 5\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Running, we obtain"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"Testing digits\n  Error :: (line:-1) :: fact was false\n    Expression: roman_to_dec(\"V\") --\u003E 5\n      Expected: 5\n      Occurred: 1\nOut of 2 total fact:\n  Verified: 1\n  Failed:   1\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now, that's better. Improving the code."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  if s == \"I\"\n    return 1\n  else\n    return 5\n  end\nend\n...\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This too will pass. Notice that this example is very silly. It is instructional,\nof course. On a real application, you could start with all digits at once, for\ninstance."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"More tests and solutions:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  @fact roman_to_dec(\"I\") --\u003E 1\n  @fact roman_to_dec(\"V\") --\u003E 5\n  @fact roman_to_dec(\"X\") --\u003E 10\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  if s == \"I\"\n    return 1\n  elseif s == \"V\"\n    return 5\n  else\n    return 10\n  end\nend\n...\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now we can refactor, because it's getting very ugly."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\n...\nconst digits = Dict(\"I\"=\u003E1, \"V\"=\u003E5, \"X\"=\u003E10)\n\nfunction roman_to_dec(s)\n  return digits[s]\nend\n...\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We can also refactor the test."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  for (digit,value) in [(\"I\",1), (\"V\",5), (\"X\",10)]\n    @fact roman_to_dec(digit) --\u003E value\n  end\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Test. Now we can add more tests for digits, and it will be much easier (because\nit's refactored) to both create the test and to solve it."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Understanding the logic now, you can add all the rest of the digits at once.\n"},{type:b,tag:l,props:{},children:[{type:a,value:"Remember to test before start fixing,"}]},{type:a,value:" even though is very easy now.\nThis could be a breaking moment on your code. If, when trying to fix it, you\nrealize it's not as simple as you expected. Remove the test, and add a smaller\none. At this time it will be very useful to have been using git."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  for (digit,value) in [(\"I\",1), (\"V\",5), (\"X\",10), (\"L\",50), (\"C\",100),\n      (\"D\",500), (\"M\",1000)]\n    @fact roman_to_dec(digit) --\u003E value\n  end\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\n...\nconst digits = Dict(\"I\"=\u003E1, \"V\"=\u003E5, \"X\"=\u003E10, \"L\"=\u003E50, \"C\"=\u003E100, \"D\"=\u003E500,\n  \"M\"=\u003E1000)\n...\n"}]}]}]},{type:a,value:c},{type:b,tag:C,props:{id:H},children:[{type:b,tag:m,props:{href:"#next-test",ariaHidden:o,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We've completed a test. Let's do the next."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Fruntests.jl\nusing RomanNumerals\n\ninclude(\"test_digits.jl\")\ninclude(\"test_double_digits.jl\")\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Double digits are more complex that single digits (by at least at factor of 2?\n:) ). Let's break it down using "},{type:b,tag:e,props:{},children:[{type:a,value:"context"}]},{type:a,value:n}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File test\u002Ftest_double_digits.jl\nusing FactCheck\n\nfacts(\"Testing double digits\") do\n  context(\"Repeated digits\") do\n    @fact roman_to_dec(\"II\") --\u003E 2\n  end\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Testing this will fail (as it should), with a "},{type:b,tag:e,props:{},children:[{type:a,value:"KeyError: II not found"}]},{type:a,value:", because\nwe're using the dictionary, and \"II\" is not in it."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Before reading the solution, try to fix it yourself. There are many ways to do\nit."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  dec = 0\n  for i = 1:length(s)\n    dec += digits[s[i:i]]\n  end\n  return dec\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This fixes it. Now to refactor. You may have noticed that "},{type:b,tag:e,props:{},children:[{type:a,value:"s[i]"}]},{type:a,value:" does not work\ninside "},{type:b,tag:e,props:{},children:[{type:a,value:"digits"}]},{type:a,value:". That is because julia differentiates characters and single\ndigits strings (like C, unlike Python). One refactor option is to change the\ndictionary to use chars.\nAnother option is to use a better variable instead of s, since it start to\nbecome a nuisance to read.\nYet another, is to use another way to make the sum."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Since this post explains the usage of TDD, it ends here.\nYou can continue with this problem until you can make a complete conversor of\nroman to decimal."}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002F2016-03-13-test-driven-development-in-julia",extension:".md",createdAt:L,updatedAt:L,bodyPlainText:"\n# Test Driven Development in Julia\n\nFirst, what is Test Driven Development (TDD)?\nWell, I'm not an expert, so don't quote me, but in practice it means that you\ndevelop your code to fulfill tests that you define prior to beginning your work.\nYou do not define **all** your tests first, though. You define a single test,\nand produce code to pass it. Then you define another code, and produce code to\npass both. And so forth until you complete your specification.\n\nThis is good because:\n\n- Wherever you stop, you know what is working.\n- When you finish, your code already has tests.\n- [You don't have to optimize prematurely.](http:\u002F\u002Fc2.com\u002Fcgi\u002Fwiki?PrematureOptimization)\n\nThe steps of TDD can be described as [from\nWikipedia](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FTest-driven_development)\n\n1. **Add tests**: These should be useful, _and should fail_.\n2. **Run tests**: Verify that the test fails. If not, go back to 1.\n3. **Write code**: Write enough code to pass the test.\n4. **Run tests**: Verify that **all** tests pass. If some of the tests fail, go back to 3.\n5. **Refactor**: Now that everything passes, make the code looks nicer. This is harder for non-seasoned programmers, because it's vague. Essentially, it means removing duplicate code, magic numbers, clarifying names, etc.\n6. **Run tests**: Again. Should be done during refactoring, to guarantee you're not breaking anything. But just to be very clear: _your tests should pass at the end of refactoring_.\n7. **Repeat**.\n\nThis is one way of describing TDD, but there are other. Many others, by the way.\nIn fact, there are many images describing it, so you can print one and staple it\naround.\n\n## Julia\n\nFirst, we are gonna follow the _package_ layout in Julia.\n[This post]({{local_prefix}}\u002Fautomated-testing\u002F) mentions it at the end.\nBasically, we need\n\n- Folder PackageName.jl\n  - Folder `src`\n  - PackageName.jl\n  - Folder `test`\n  - runtests.jl\n  - README.md\n  - LICENSE.md\n\nIn our example, we're gonna write a program to convert Roman numbers to decimal,\nand vice-versa.\nThis was inspired by [this\nsite](http:\u002F\u002Fcodingdojo.org\u002Fcgi-bin\u002Findex.pl?KataRomanNumerals).\n\n**Important: You should use git, but I'll skip it here**\n\nLet's begin writing the outline of the project\n\n```\nmkdir RomanNumerals.jl\ncd RomanNumerals\nmkdir src test\n```\n\n```\n# File src\u002FRomanNumerals.jl\nmodule RomanNumerals\n\nend\n```\n\n```\n# File test\u002Fruntests.jl\nusing RomanNumerals\n\ninclude(\"test_digits.jl\")\n```\n\nThis defines the building blocks. Note that `test_digits.jl` does not exist. We're\ngonna create it to test the individuals digits.\n\nOur testing environment will consist of having a terminal open at all\ntimes at the root of this project. Our testing command will be\n\n```\njulia -L src\u002FRomanNumerals.jl test\u002Fruntests.jl\n```\n\nThere are different ways to issue the same command, but this is locally good.\n\n## Tests\n\nJulia comes with a `Base.Test` package, which is the least you should use.\nFor all basic things it is enough. It provides the `@test` macro, which you can\nuse as\n\n```\nusing Base.Test\n@test 1 == 1 # This will pass\n@test 1 == 0 # This will fail\n```\n\nWe're gonna go a step beyong and use\n[FactCheck.jl](https:\u002F\u002Fgithub.com\u002FJuliaLang\u002FFactCheck.jl).\nThis provides more information about the tests.\n\nWe're gonna implement the function `roman_to_dec` which receives a string with\nroman numerals and returns the decimal equivalent of the number.\nWith `FactCheck`, our first test will be\n\n```\n# File test\u002Ftest_digits.jl\nusing FactCheck\n\nfacts(\"Testing digits\") do\n  @fact roman_to_dec(\"I\") --\u003E 1\nend\n```\n\nWhen we run our test, we'll get\n\n```\nTesting digits\n  Error :: (line:-1)\n    Expression: roman_to_dec(\"I\") --\u003E 1\n    UndefVarError: roman_to_dec not defined\n      ...\n```\n\nLook, `roman_to_dec not defined`. Well, let's define it.\n\n```\n# File src\u002FRomanNumerals.jl\n...\nexport roman_to_dec\n\nfunction roman_to_dec(s)\nend\n...\n```\n\nRunning again, we get an even better message\n\n```\nTesting digits\n  Error :: (line:-1) :: fact was false\n    Expression: roman_to_dec(\"I\") --\u003E 1\n      Expected: 1\n      Occurred: nothing\nOut of 1 total fact:\n  Failed:   1\n```\n\nExpected 1, nothing ocurred. Well, that's easy.\n\n```\n# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  return 1\nend\n...\n```\n\n```\nTesting digits\n1 fact verified\n```\n\nDone. We're successful. Rejoice. Back to work.\n\nWe've written a test, we've tested it, we've written code to fix it, we tested\nit. Not much to refactor, this is a silly example.\n\nRepeat. Let's improve the tests.\n\n```\n# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  @fact roman_to_dec(\"I\") --\u003E 1\n  @fact roman_to_dec(\"V\") --\u003E 5\nend\n```\n\nRunning, we obtain\n\n```\nTesting digits\n  Error :: (line:-1) :: fact was false\n    Expression: roman_to_dec(\"V\") --\u003E 5\n      Expected: 5\n      Occurred: 1\nOut of 2 total fact:\n  Verified: 1\n  Failed:   1\n```\n\nNow, that's better. Improving the code.\n\n```\n# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  if s == \"I\"\n    return 1\n  else\n    return 5\n  end\nend\n...\n```\n\nThis too will pass. Notice that this example is very silly. It is instructional,\nof course. On a real application, you could start with all digits at once, for\ninstance.\n\nMore tests and solutions:\n\n```\n# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  @fact roman_to_dec(\"I\") --\u003E 1\n  @fact roman_to_dec(\"V\") --\u003E 5\n  @fact roman_to_dec(\"X\") --\u003E 10\nend\n```\n\n```\n# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  if s == \"I\"\n    return 1\n  elseif s == \"V\"\n    return 5\n  else\n    return 10\n  end\nend\n...\n```\n\nNow we can refactor, because it's getting very ugly.\n\n```\n# File src\u002FRomanNumerals.jl\n...\nconst digits = Dict(\"I\"=\u003E1, \"V\"=\u003E5, \"X\"=\u003E10)\n\nfunction roman_to_dec(s)\n  return digits[s]\nend\n...\n```\n\nWe can also refactor the test.\n\n```\n# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  for (digit,value) in [(\"I\",1), (\"V\",5), (\"X\",10)]\n    @fact roman_to_dec(digit) --\u003E value\n  end\nend\n```\n\nTest. Now we can add more tests for digits, and it will be much easier (because\nit's refactored) to both create the test and to solve it.\n\nUnderstanding the logic now, you can add all the rest of the digits at once.\n**Remember to test before start fixing,** even though is very easy now.\nThis could be a breaking moment on your code. If, when trying to fix it, you\nrealize it's not as simple as you expected. Remove the test, and add a smaller\none. At this time it will be very useful to have been using git.\n\n```\n# File test\u002Ftest_digits.jl\n...\nfacts(\"Testing digits\") do\n  for (digit,value) in [(\"I\",1), (\"V\",5), (\"X\",10), (\"L\",50), (\"C\",100),\n      (\"D\",500), (\"M\",1000)]\n    @fact roman_to_dec(digit) --\u003E value\n  end\nend\n```\n\n```\n# File src\u002FRomanNumerals.jl\n...\nconst digits = Dict(\"I\"=\u003E1, \"V\"=\u003E5, \"X\"=\u003E10, \"L\"=\u003E50, \"C\"=\u003E100, \"D\"=\u003E500,\n  \"M\"=\u003E1000)\n...\n```\n\n## Next test\n\nWe've completed a test. Let's do the next.\n\n```\n# File test\u002Fruntests.jl\nusing RomanNumerals\n\ninclude(\"test_digits.jl\")\ninclude(\"test_double_digits.jl\")\n```\n\nDouble digits are more complex that single digits (by at least at factor of 2?\n:) ). Let's break it down using `context`.\n\n```\n# File test\u002Ftest_double_digits.jl\nusing FactCheck\n\nfacts(\"Testing double digits\") do\n  context(\"Repeated digits\") do\n    @fact roman_to_dec(\"II\") --\u003E 2\n  end\nend\n```\n\nTesting this will fail (as it should), with a `KeyError: II not found`, because\nwe're using the dictionary, and \"II\" is not in it.\n\nBefore reading the solution, try to fix it yourself. There are many ways to do\nit.\n\n```\n# File src\u002FRomanNumerals.jl\n...\nfunction roman_to_dec(s)\n  dec = 0\n  for i = 1:length(s)\n    dec += digits[s[i:i]]\n  end\n  return dec\nend\n```\n\nThis fixes it. Now to refactor. You may have noticed that `s[i]` does not work\ninside `digits`. That is because julia differentiates characters and single\ndigits strings (like C, unlike Python). One refactor option is to change the\ndictionary to use chars.\nAnother option is to use a better variable instead of s, since it start to\nbecome a nuisance to read.\nYet another, is to use another way to make the sum.\n\nSince this post explains the usage of TDD, it ends here.\nYou can continue with this problem until you can make a complete conversor of\nroman to decimal.\n"},prev:{slug:"2016-03-20-games-for-programmers",title:"Games for Programmers"},next:{slug:"2016-03-06-latex-tools-for-revision",title:"LaTeX tools for revision"}}],fetch:{},mutations:void 0}}("text","element","\n","p","code","div","nuxt-content-highlight","pre","language-text","line-numbers","li","strong","a",".","true",-1,"span","icon","icon-link","nofollow","noopener","noreferrer","_blank","julia",2,"ul","em","Run tests","h2","Test Driven Development in Julia","Julia","tests","Tests","next-test","Next test","all","Folder ","2022-12-23T17:39:35.597Z")));