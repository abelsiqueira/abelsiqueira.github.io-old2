__NUXT_JSONP__("/blog/2015-10-01-installing-cutest-and-cutestjl", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x){return {data:[{page:{slug:"2015-10-01-installing-cutest-and-cutestjl",title:v,date:"2015-10-01",tags:["cutest","julia"],toc:[],body:{type:"root",children:[{type:b,tag:"h1",props:{id:"installing-cutest-and-cutestjl"},children:[{type:b,tag:e,props:{href:"#installing-cutest-and-cutestjl",ariaHidden:"true",tabIndex:-1},children:[{type:b,tag:"span",props:{className:["icon","icon-link"]},children:[]}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This post will tell you how to install CUTEst using a different tool that makes\nit much easier. Also, I'll install CUTEst.jl, the CUTEst interface for Julia."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:q,props:{},children:[{type:a,value:s}]},{type:a,value:t},{type:b,tag:u,props:{},children:[{type:a,value:"Now, CUTEst.jl install CUTEst by itself. Check "},{type:b,tag:e,props:{href:"https:\u002F\u002Fabelsiqueira.github.io%7B%7Blocal_prefix%7D%7Dnlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia\u002F",rel:[f,g,h],target:i},children:[{type:a,value:"this\npost"}]},{type:a,value:".\nAlso, for Linux, I've created "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002Flinux-cutest",rel:[f,g,h],target:i},children:[{type:a,value:"this CUTEst\ninstaller"}]},{type:a,value:", which should be\neasier to use. February, 11, 2017"}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:q,props:{},children:[{type:a,value:s}]},{type:a,value:t},{type:b,tag:u,props:{},children:[{type:a,value:"Some corrections were made on February, 15, 2016"}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:q,props:{},children:[{type:a,value:s}]},{type:a,value:t},{type:b,tag:u,props:{},children:[{type:a,value:"Some corrections were made on November, 11, 2015"}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"By now you probably know\n"},{type:b,tag:e,props:{href:"http:\u002F\u002Fccpforge.cse.rl.ac.uk\u002Fgf\u002Fproject\u002Fcutest\u002Fwiki",rel:[f,g,h],target:i},children:[{type:a,value:"CUTEst"}]},{type:a,value:",\nthe repository for testing and comparing nonlinear programming algorithms.\nIt's widely used in the community for some time (considering CUTE and CUTEr,\nthe previous versions).\nIf not, this is a good change to test it, using\n"},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.julialang.org",rel:[f,g,h],target:i},children:[{type:a,value:"Julia"}]},{type:a,value:" to play around.\nThis is a not a post to convince you to use Julia, but I have to say that it is\nmuch easier to use CUTEst on Julia than on MatLab.\nSo, if you are starting on it, I suggest you take a look."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We will use Homebrew to install CUTEst, for two reasons:"}]},{type:a,value:c},{type:b,tag:w,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"It's much easier (when you learn it)"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Julia requires shared libraries, that the original installation did not\nprovide."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Homebrew is a kind of package manager (such as apt-get, pip, etc.).\nFor linux, there are many things that we don't need from Homebrew, because you\nnormally already have a package manager. However, Homebrew is widely used by OSX\nusers, so it has a lot of packages.\nThe linux version is "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002FHomebrew\u002Flinuxbrew",rel:[f,g,h],target:i},children:[{type:a,value:"Linuxbrew"}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The installation is quite simple:"}]},{type:a,value:c},{type:b,tag:w,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Install brew"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Install CUTEst"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Install CUTEst.jl"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I just made these steps and record my terminal, so you can check\n"},{type:b,tag:e,props:{href:"https:\u002F\u002Fasciinema.org\u002Fa\u002F27127",rel:[f,g,h],target:i},children:[{type:a,value:"Asciinema"}]},{type:a,value:", or the embedded version on the\nbottom of the page. Be warned, though, that I was \"cold running\" them, so some\nparts are very slow."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To install brew, I recommend you check the page. For the impatient,"}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,p]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"ruby -e \"$(curl -fsSL https:\u002F\u002Fraw.githubusercontent.com\u002FHomebrew\u002Flinuxbrew\u002Fgo\u002Finstall)\"\necho 'export PATH=\"$HOME\u002F.linuxbrew\u002Fbin:$PATH\"' \u003E\u003E $HOME\u002F.bashrc\nsource $HOME\u002F.bashrc\nsudo apt-get install build-essential subversion\nbrew doctor\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To install CUTEst, read the\n"},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002Foptimizers\u002Fhomebrew-cutest",rel:[f,g,h],target:i},children:[{type:a,value:"tap cutest"}]},{type:a,value:".\nAgain, for the impatient"}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,p]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"brew tap optimizers\u002Fcutest\nbrew install cutest\nbrew install mastsif\nfor f in archdefs mastsif sifdecode cutest; do \\\n  echo \"source $(brew --prefix $f)\u002F$f.bashrc\" \u003E\u003E \\\n  $HOME\u002F.bashrc; \\\ndone\necho 'export LD_LIBRARY_PATH=\"$HOME\u002F.linuxbrew\u002Flib:$LD_LIBRARY_PATH\"' \u003E\u003E $HOME\u002F.bashrc\nsource $HOME\u002F.bashrc\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This should get CUTEst installed.\nNotice the "},{type:b,tag:j,props:{},children:[{type:a,value:"LD_LIBRARY_PATH"}]},{type:a,value:" variable, which points to where the CUTEst library\nwill be."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Test it with"}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,p]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"brew test sifdecode\nbrew test cutest\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"That's it. You have CUTEst installed to use with Fortran or C.\nA can't provide a simple example, because they aren't simple (enough).\nI'll now go to Julia, and I recommend you try it."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To install Julia, go to their page, then downloads, then download the\nstatic version of the stable release (or do what you want, I'm not your boss).\nThen, in julia, to install\n"},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FCUTEst.jl",rel:[f,g,h],target:i},children:[{type:a,value:"CUTEst.jl"}]},{type:a,value:",\nissue the commands"}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,p]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"Pkg.clone(\"https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FCUTEst.jl\")\nPkg.checkout(\"CUTEst\", \"fix\u002Fissue4\")\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If nothing goes wrong, then you can play around.\nFor instance, to open problem HS32 and get the objective function value at point\n(2,3), we do"}]},{type:a,value:c},{type:b,tag:l,props:{className:[m]},children:[{type:b,tag:n,props:{className:[o,p]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"using CUTEst\nnlp = CUTEstModel(\"HS32\")\nf = obj(nlp, [2.0;3.0])\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If you're familiar with CUTEst, you can use the classic functions "},{type:b,tag:j,props:{},children:[{type:a,value:"cfn"}]},{type:a,value:" and\n"},{type:b,tag:j,props:{},children:[{type:a,value:"ufn"}]},{type:a,value:" too, in the default way (as called from C) or a more Julian way.\nThis would become too long to explain now, so I'll make a post in a few days (or\nmonths).\nIf you need it, please contact me."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This concludes the new installation of CUTEst."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:q,props:{},children:[{type:a,value:"Warning"}]},{type:a,value:": Due to current limitations we cannot open two problems at the same\ntime in CUTEst without the possibility of a segmentation fault.\nSo, if you need to run cutest for a list of problems, I suggest you use a bash\nscript to loop over each problem and call your Julia code passing the problem as\nan input argument."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Ths embedded Asciinema video is below."}]},{type:a,value:c},{type:b,tag:"script",props:{type:"text\u002Fjavascript",src:"https:\u002F\u002Fasciinema.org\u002Fa\u002F27127.js",id:"asciicast-27127",async:true},children:[]}]},dir:"\u002Fblog",path:"\u002Fblog\u002F2015-10-01-installing-cutest-and-cutestjl",extension:".md",createdAt:x,updatedAt:x,bodyPlainText:"\n# Installing CUTEst and CUTEst.jl\n\nThis post will tell you how to install CUTEst using a different tool that makes\nit much easier. Also, I'll install CUTEst.jl, the CUTEst interface for Julia.\n\n**Edit:** _Now, CUTEst.jl install CUTEst by itself. Check [this\npost](https:\u002F\u002Fabelsiqueira.github.io{{local_prefix}}nlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia\u002F).\nAlso, for Linux, I've created [this CUTEst\ninstaller](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002Flinux-cutest), which should be\neasier to use. February, 11, 2017_.\n\n**Edit:** _Some corrections were made on February, 15, 2016_.\n\n**Edit:** _Some corrections were made on November, 11, 2015_.\n\nBy now you probably know\n[CUTEst](http:\u002F\u002Fccpforge.cse.rl.ac.uk\u002Fgf\u002Fproject\u002Fcutest\u002Fwiki),\nthe repository for testing and comparing nonlinear programming algorithms.\nIt's widely used in the community for some time (considering CUTE and CUTEr,\nthe previous versions).\nIf not, this is a good change to test it, using\n[Julia](http:\u002F\u002Fwww.julialang.org) to play around.\nThis is a not a post to convince you to use Julia, but I have to say that it is\nmuch easier to use CUTEst on Julia than on MatLab.\nSo, if you are starting on it, I suggest you take a look.\n\nWe will use Homebrew to install CUTEst, for two reasons:\n\n- It's much easier (when you learn it)\n- Julia requires shared libraries, that the original installation did not\n  provide.\n\nHomebrew is a kind of package manager (such as apt-get, pip, etc.).\nFor linux, there are many things that we don't need from Homebrew, because you\nnormally already have a package manager. However, Homebrew is widely used by OSX\nusers, so it has a lot of packages.\nThe linux version is [Linuxbrew](https:\u002F\u002Fgithub.com\u002FHomebrew\u002Flinuxbrew).\n\nThe installation is quite simple:\n\n- Install brew\n- Install CUTEst\n- Install CUTEst.jl\n\nI just made these steps and record my terminal, so you can check\n[Asciinema](https:\u002F\u002Fasciinema.org\u002Fa\u002F27127), or the embedded version on the\nbottom of the page. Be warned, though, that I was \"cold running\" them, so some\nparts are very slow.\n\nTo install brew, I recommend you check the page. For the impatient,\n\n```\nruby -e \"$(curl -fsSL https:\u002F\u002Fraw.githubusercontent.com\u002FHomebrew\u002Flinuxbrew\u002Fgo\u002Finstall)\"\necho 'export PATH=\"$HOME\u002F.linuxbrew\u002Fbin:$PATH\"' \u003E\u003E $HOME\u002F.bashrc\nsource $HOME\u002F.bashrc\nsudo apt-get install build-essential subversion\nbrew doctor\n```\n\nTo install CUTEst, read the\n[tap cutest](https:\u002F\u002Fgithub.com\u002Foptimizers\u002Fhomebrew-cutest).\nAgain, for the impatient\n\n```\nbrew tap optimizers\u002Fcutest\nbrew install cutest\nbrew install mastsif\nfor f in archdefs mastsif sifdecode cutest; do \\\n  echo \"source $(brew --prefix $f)\u002F$f.bashrc\" \u003E\u003E \\\n  $HOME\u002F.bashrc; \\\ndone\necho 'export LD_LIBRARY_PATH=\"$HOME\u002F.linuxbrew\u002Flib:$LD_LIBRARY_PATH\"' \u003E\u003E $HOME\u002F.bashrc\nsource $HOME\u002F.bashrc\n```\n\nThis should get CUTEst installed.\nNotice the `LD_LIBRARY_PATH` variable, which points to where the CUTEst library\nwill be.\n\nTest it with\n\n```\nbrew test sifdecode\nbrew test cutest\n```\n\nThat's it. You have CUTEst installed to use with Fortran or C.\nA can't provide a simple example, because they aren't simple (enough).\nI'll now go to Julia, and I recommend you try it.\n\nTo install Julia, go to their page, then downloads, then download the\nstatic version of the stable release (or do what you want, I'm not your boss).\nThen, in julia, to install\n[CUTEst.jl](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FCUTEst.jl),\nissue the commands\n\n```\nPkg.clone(\"https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FCUTEst.jl\")\nPkg.checkout(\"CUTEst\", \"fix\u002Fissue4\")\n```\n\nIf nothing goes wrong, then you can play around.\nFor instance, to open problem HS32 and get the objective function value at point\n(2,3), we do\n\n```\nusing CUTEst\nnlp = CUTEstModel(\"HS32\")\nf = obj(nlp, [2.0;3.0])\n```\n\nIf you're familiar with CUTEst, you can use the classic functions `cfn` and\n`ufn` too, in the default way (as called from C) or a more Julian way.\nThis would become too long to explain now, so I'll make a post in a few days (or\nmonths).\nIf you need it, please contact me.\n\nThis concludes the new installation of CUTEst.\n\n**Warning**: Due to current limitations we cannot open two problems at the same\ntime in CUTEst without the possibility of a segmentation fault.\nSo, if you need to run cutest for a list of problems, I suggest you use a bash\nscript to loop over each problem and call your Julia code passing the problem as\nan input argument.\n\nThs embedded Asciinema video is below.\n\n\u003Cscript type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fasciinema.org\u002Fa\u002F27127.js\"\nid=\"asciicast-27127\" async\u003E\u003C\u002Fscript\u003E\n"},prev:{slug:"2015-11-16-new-computer-at-work",title:"New computer at work"},next:{slug:"2015-05-30-resultado-da-oficina-de-ferramentas-computacionais-para-pesquisadores",title:"Resultado da Oficina de Ferramentas Computacionais Para Pesquisadores"}}],fetch:{},mutations:void 0}}("text","element","\n","p","a","nofollow","noopener","noreferrer","_blank","code","li","div","nuxt-content-highlight","pre","language-text","line-numbers","strong",".","Edit:"," ","em","Installing CUTEst and CUTEst.jl","ul","2022-12-23T14:23:08.540Z")));