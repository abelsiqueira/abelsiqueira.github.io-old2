__NUXT_JSONP__("/blog/2018-09-04-the-dollar-game-from-numberphile", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x){return {data:[{page:{slug:"2018-09-04-the-dollar-game-from-numberphile",title:p,date:"2018-09-04",tags:["julia","jump","numberphile","optimization","linearprogramming"],toc:[{id:q,depth:2,text:r}],body:{type:"root",children:[{type:b,tag:"h1",props:{id:"optimizing-the-dollar-game-from-numberphile"},children:[{type:b,tag:e,props:{href:"#optimizing-the-dollar-game-from-numberphile",ariaHidden:s,tabIndex:t},children:[{type:b,tag:u,props:{className:[v,w]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I just watched "},{type:b,tag:e,props:{href:"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=U33dsEcKgeQ",rel:[i,j,k],target:l},children:[{type:a,value:"The Dollar Game -\nNumberphile"}]},{type:a,value:", in which a game involving graphs is presented.\nI recommend you watch the video for complete information."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The game involves a graph with integer values on its nodes, positive and\nnegative. For instance, the following graph:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{alt:g,src:"\u002Fblog\u002F2018-09-04\u002Fexample.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Each "},{type:b,tag:h,props:{},children:[{type:a,value:"node"}]},{type:a,value:" corresponds to a person, the "},{type:b,tag:h,props:{},children:[{type:a,value:"node value"}]},{type:a,value:" is the amount of\nmoney that person has, the "},{type:b,tag:h,props:{},children:[{type:a,value:"edges"}]},{type:a,value:" are the people that person can give or\ntake money from.\nThe objective of the game is to have everyone have a non-negative amount of money.\nIn each "},{type:b,tag:h,props:{},children:[{type:a,value:"move"}]},{type:a,value:" of the game, one person decides to give or take money,\n"},{type:b,tag:h,props:{},children:[{type:a,value:"however"}]},{type:a,value:", that person either takes 1 dollar from each of their connections,\nor gives 1 dollar to each one."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"On Numberphile, there are two questions: (i) does the problem has a solution?\n(ii) what's the least amount of moves to find it?\nI've decided to implement this problem using optimization, since it looked\nalmost straightfoward. The optimization model was indeed very simple, and it\ntook more time drawing graphs than modelling. Still fun though."}]},{type:a,value:c},{type:b,tag:"h2",props:{id:q},children:[{type:b,tag:e,props:{href:"#the-model",ariaHidden:s,tabIndex:t},children:[{type:b,tag:u,props:{className:[v,w]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Given the undirected graph $G = (V, E)$, and values $w_i, i \\in V$, our\nmodel is based on the following observations:"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"The order of moves is irrelevant;"}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"Whether the move is a "},{type:b,tag:o,props:{},children:[{type:a,value:"give"}]},{type:a,value:" or a "},{type:b,tag:o,props:{},children:[{type:a,value:"take"}]},{type:a,value:", is just a question of "},{type:b,tag:h,props:{},children:[{type:a,value:"sign"}]},{type:a,value:";"}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"The value of a node after the moves can be computed by accounting for the\nmoves done by the done and by its neighbours."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Hence, we can model it using two non-negative integer variables $g_i$ and\n$t_i$ storing the number of gives and takes of node $i$. Notice that we\ncould use $y_i = g_i - t_i$, but this is more descriptive."}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"Objective: minimize the number of moves"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$$\\min \\sum_i (g_i + t_i)$$"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:"Constraint: after the moves, the values of the nodes should be non-negative"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$$\nw_i + \\sum_i (t_i - g_i) |N_i| + \\sum_{j \\in N_i} (g_j - t_j) \\geq 0,\n\\qquad \\forall i \\in V.\n$$"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"As it turns out, it's a very simple model. The implementation is also very\nsimple. We're using "},{type:b,tag:e,props:{href:"https:\u002F\u002Fjulialang.org",rel:[i,j,k],target:l},children:[{type:a,value:"Julia Language"}]},{type:a,value:" with the\n"},{type:b,tag:e,props:{href:"https:\u002F\u002Fjuliaopt.org",rel:[i,j,k],target:l},children:[{type:a,value:"JuMP"}]},{type:a,value:" modelling language, and the\n"},{type:b,tag:e,props:{href:"https:\u002F\u002Fjuliagraphs.github.io\u002F",rel:[i,j,k],target:l},children:[{type:a,value:"LightGraphs package from JuliaGraphs"}]},{type:a,value:".\nHere's the code:"}]},{type:a,value:c},{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-text","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:a,value:"function dollar_game(g, W)\n   nv = length(vertices(g))\n   model = Model(solver = CbcSolver())\n   @variable(model, give[1:nv] \u003E= 0, Int)\n   @variable(model, take[1:nv] \u003E= 0, Int)\n   @objective(model, Min, sum(give[i] + take[i] for i = 1:nv))\n   @expression(model, x[i=1:nv], W[i] +\n               (take[i] - give[i]) * length(neighbors(g, i)) +\n               sum(give[j] - take[j] for j = neighbors(g, i)))\n   @constraint(model, x .\u003E= 0)\n   status = solve(model)\n   println(\"status = $status\")\n   if status != :Optimal\n      return zeros(nv), W\n   end\n\n   give = Int.(getvalue(give))\n   take = Int.(getvalue(take))\n   sol = Int.(getvalue(x))\n   println(\"give = $give\")\n   println(\"take = $take\")\n   println(\"sol = $sol\")\n   return give - take, sol\nend\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The code should be pretty self-explanatory, but ping me on twitter if you need clarification."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Using the results and "},{type:b,tag:"del",props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"mad plotting skillz"}]}]},{type:a,value:" the packages Plots and GR, we\nobtain a solution for the problem above. The moves are illustrated below, where\nblue means giving, and red means taking."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{alt:g,src:"\u002Fblog\u002F2018-09-04\u002Fexample-000.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{alt:g,src:"\u002Fblog\u002F2018-09-04\u002Fexample-001.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{alt:g,src:"\u002Fblog\u002F2018-09-04\u002Fexample-002.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{alt:g,src:"\u002Fblog\u002F2018-09-04\u002Fexample-003.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{alt:g,src:"\u002Fblog\u002F2018-09-04\u002Fexample-004.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{alt:g,src:"\u002Fblog\u002F2018-09-04\u002Fexample-005.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The full code is available at "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FDollarGame.jl",rel:[i,j,k],target:l},children:[{type:a,value:"GitHub"}]},{type:a,value:"."}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002F2018-09-04-the-dollar-game-from-numberphile",extension:".md",createdAt:x,updatedAt:x,bodyPlainText:"\n# Optimizing the Dollar Game from Numberphile\n\nI just watched [The Dollar Game -\nNumberphile](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=U33dsEcKgeQ), in which a game involving graphs is presented.\nI recommend you watch the video for complete information.\n\nThe game involves a graph with integer values on its nodes, positive and\nnegative. For instance, the following graph:\n\n![](\u002Fblog\u002F2018-09-04\u002Fexample.png)\n\nEach **node** corresponds to a person, the **node value** is the amount of\nmoney that person has, the **edges** are the people that person can give or\ntake money from.\nThe objective of the game is to have everyone have a non-negative amount of money.\nIn each **move** of the game, one person decides to give or take money,\n**however**, that person either takes 1 dollar from each of their connections,\nor gives 1 dollar to each one.\n\nOn Numberphile, there are two questions: (i) does the problem has a solution?\n(ii) what's the least amount of moves to find it?\nI've decided to implement this problem using optimization, since it looked\nalmost straightfoward. The optimization model was indeed very simple, and it\ntook more time drawing graphs than modelling. Still fun though.\n\n## The model\n\nGiven the undirected graph $G = (V, E)$, and values $w_i, i \\in V$, our\nmodel is based on the following observations:\n\n- The order of moves is irrelevant;\n- Whether the move is a _give_ or a _take_, is just a question of **sign**;\n- The value of a node after the moves can be computed by accounting for the\n  moves done by the done and by its neighbours.\n\nHence, we can model it using two non-negative integer variables $g_i$ and\n$t_i$ storing the number of gives and takes of node $i$. Notice that we\ncould use $y_i = g_i - t_i$, but this is more descriptive.\n\n- Objective: minimize the number of moves\n\n$$\\min \\sum_i (g_i + t_i)$$\n\n- Constraint: after the moves, the values of the nodes should be non-negative\n\n$$\nw_i + \\sum_i (t_i - g_i) |N_i| + \\sum_{j \\in N_i} (g_j - t_j) \\geq 0,\n\\qquad \\forall i \\in V.\n$$\n\nAs it turns out, it's a very simple model. The implementation is also very\nsimple. We're using [Julia Language](https:\u002F\u002Fjulialang.org) with the\n[JuMP](https:\u002F\u002Fjuliaopt.org) modelling language, and the\n[LightGraphs package from JuliaGraphs](https:\u002F\u002Fjuliagraphs.github.io\u002F).\nHere's the code:\n\n```\nfunction dollar_game(g, W)\n   nv = length(vertices(g))\n   model = Model(solver = CbcSolver())\n   @variable(model, give[1:nv] \u003E= 0, Int)\n   @variable(model, take[1:nv] \u003E= 0, Int)\n   @objective(model, Min, sum(give[i] + take[i] for i = 1:nv))\n   @expression(model, x[i=1:nv], W[i] +\n               (take[i] - give[i]) * length(neighbors(g, i)) +\n               sum(give[j] - take[j] for j = neighbors(g, i)))\n   @constraint(model, x .\u003E= 0)\n   status = solve(model)\n   println(\"status = $status\")\n   if status != :Optimal\n      return zeros(nv), W\n   end\n\n   give = Int.(getvalue(give))\n   take = Int.(getvalue(take))\n   sol = Int.(getvalue(x))\n   println(\"give = $give\")\n   println(\"take = $take\")\n   println(\"sol = $sol\")\n   return give - take, sol\nend\n```\n\nThe code should be pretty self-explanatory, but ping me on twitter if you need clarification.\n\nUsing the results and ~~_mad plotting skillz_~~ the packages Plots and GR, we\nobtain a solution for the problem above. The moves are illustrated below, where\nblue means giving, and red means taking.\n\n![](\u002Fblog\u002F2018-09-04\u002Fexample-000.png)\n![](\u002Fblog\u002F2018-09-04\u002Fexample-001.png)\n![](\u002Fblog\u002F2018-09-04\u002Fexample-002.png)\n![](\u002Fblog\u002F2018-09-04\u002Fexample-003.png)\n![](\u002Fblog\u002F2018-09-04\u002Fexample-004.png)\n![](\u002Fblog\u002F2018-09-04\u002Fexample-005.png)\n\nThe full code is available at [GitHub](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FDollarGame.jl).\n"},prev:{slug:"2018-12-05-package-development-on-julia-10",title:"Package Development in Julia 1.0 using the REPL"},next:{slug:"2018-07-04-my-experience-in-the-jump-dev-annual-workshop",title:"My experience in the JuMP-dev annual workshop"}}],fetch:{},mutations:void 0}}("text","element","\n","p","a","img","","strong","nofollow","noopener","noreferrer","_blank","li","ul","em","Optimizing the Dollar Game from Numberphile","the-model","The model","true",-1,"span","icon","icon-link","2022-12-23T23:04:30.335Z")));