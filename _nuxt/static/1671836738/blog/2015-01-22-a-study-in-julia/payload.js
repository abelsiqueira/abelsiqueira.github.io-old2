__NUXT_JSONP__("/blog/2015-01-22-a-study-in-julia", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){return {data:[{page:{slug:"2015-01-22-a-study-in-julia",title:r,date:"2015-01-22",tags:["julia","work","c","fortran"],toc:[],body:{type:"root",children:[{type:b,tag:"h1",props:{id:"a-study-in-julia"},children:[{type:b,tag:d,props:{href:"#a-study-in-julia",ariaHidden:"true",tabIndex:-1},children:[{type:b,tag:"span",props:{className:["icon","icon-link"]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"Today I begin a study in "},{type:b,tag:d,props:{href:"http:\u002F\u002Fjulialang.org\u002F",rel:[i,j,k],target:l},children:[{type:a,value:"Julia"}]},{type:a,value:".\nThis fantastic tool has syntax similar to that of Octave\u002FMatlab,\nbut is much faster. Furthermore, the interface with functions\nmade in C and Fortran is much easier to accomplish, and since\nmost things in computational mathematics are on these languages,\nthis feature is wonderful."}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"My intented work is"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"make a simple julia and C interface, with auto-compiling"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"and test on GitHub and Travis CI;\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"develop a nonlinear optimization tool completely in Julia,"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"then improve the slow bits by using C and\u002For Fortran;\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"implement\u002Fimprove the CUTEst interface"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:g,props:{},children:[{type:a,value:"[[1]](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002Fugly),\n[[2]](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FCUTEst.jl),\npossibly creating a SIF converter.\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"if things work out, submit to "},{type:b,tag:d,props:{href:"http:\u002F\u002Fwww.juliaopt.org\u002F",rel:[i,j,k],target:l},children:[{type:a,value:"JuliaOpt"}]},{type:a,value:"."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"My work starts with the "},{type:b,tag:d,props:{href:"https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002Fjulia-c-sample.git",rel:[i,j,k],target:l},children:[{type:a,value:"Julia-C\nSamples"}]},{type:a,value:".\nIf you need me, I might be on "},{type:b,tag:g,props:{},children:[{type:a,value:"#julia"}]},{type:a,value:" on IRC\u002Ffreenode."}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002F2015-01-22-a-study-in-julia",extension:".md",createdAt:s,updatedAt:s,bodyPlainText:"\n# A Study in Julia\n\nToday I begin a study in [Julia](http:\u002F\u002Fjulialang.org\u002F).\nThis fantastic tool has syntax similar to that of Octave\u002FMatlab,\nbut is much faster. Furthermore, the interface with functions\nmade in C and Fortran is much easier to accomplish, and since\nmost things in computational mathematics are on these languages,\nthis feature is wonderful.\n\nMy intented work is\n\n- make a simple julia and C interface, with auto-compiling\n\n```\nand test on GitHub and Travis CI;\n```\n\n- develop a nonlinear optimization tool completely in Julia,\n\n```\nthen improve the slow bits by using C and\u002For Fortran;\n```\n\n- implement\u002Fimprove the CUTEst interface\n\n```\n[[1]](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002Fugly),\n[[2]](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002FCUTEst.jl),\npossibly creating a SIF converter.\n```\n\n- if things work out, submit to [JuliaOpt](http:\u002F\u002Fwww.juliaopt.org\u002F).\n\nMy work starts with the [Julia-C\nSamples](https:\u002F\u002Fgithub.com\u002Fabelsiqueira\u002Fjulia-c-sample.git).\nIf you need me, I might be on `#julia` on IRC\u002Ffreenode.\n"},prev:{slug:"2015-02-06-cutestjl",title:"CUTEst.jl"},next:{slug:"2015-01-16-selecting-a-subgroup-of-cutest-problems-according-to-specific-criteria",title:"Selecting a Subgroup of CUTEst Problems According to Specific Criteria"}}],fetch:{},mutations:void 0}}("text","element","\n","a","ul","li","code","p","nofollow","noopener","noreferrer","_blank","div","nuxt-content-highlight","pre","language-text","line-numbers","A Study in Julia","2022-12-23T23:04:30.335Z")));