<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Abel Soares Siqueira</title>
        <link>https://abelsiqueira.github.io/tag/tech/feed.xml</link>
        <description>RSS feed for abelsiqueira.github.io</description>
        <lastBuildDate>Fri, 23 Dec 2022 17:40:54 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/nuxt-community/feed-module</generator>
        <category>Nuxt.js</category>
        <item>
            <title><![CDATA[Instalando o Ubuntu 14.10 no Sony Vaio (Problemas com o SSD)]]></title>
            <link>https://abelsiqueira.github.io/blog/2015-01-12-instalando-o-ubuntu-1410-no-sony-vaio</link>
            <guid>https://abelsiqueira.github.io/blog/2015-01-12-instalando-o-ubuntu-1410-no-sony-vaio</guid>
            <pubDate>Mon, 12 Jan 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# Instalando o Ubuntu 14.10 no Sony Vaio (Problemas com o SSD)

Hoje instalei em dual-boot o Ubuntu 14.10 e o windows 8.
Não tive problemas com o UEFI, nem secure boot.
Não tenho certeza, mas talvez o windows não seja o que veio
de fábrica.

Eu já tinha um USB com o Ubuntu 14.10, então pluguei-o
e bootei o computador.
F12-F12-F12-F12... A tela de seleção de boot não apareceu,
mas o usb foi escolhido automaticamente.

O ubuntu bootou e selecionei instalar.
Escolhi o particionamento manual,
que é minha escolha usual.
Normalmente faço o particionamento manual,
porque não gosto quando eles criam (criavam, não sei
se continuam) apenas o `/` e o `swap`.
O windows estava instalado em duas partições num SSD.
Selecionei a correspondente, redimensionei, criei 3 partições lógicas
(`/`, `swap`, e `/home`), e mandei instalar.
A instalação não teve problemas. Aí eu bootei e deu erro.

O primeiro erro que apareceu foi

```
tpm_tis: A TPM error (6) occurred attempting to read a pcr value
```

Que depois descobri que era proveniente do
[Trusted Platform Module](https://wiki.archlinux.org/index.php/TPM).
Depois de pouca busca, descobri que bastava entrar na BIOS e habilitar o
TPM. A saber, para entrar na BIOS no Sony Vaio, desligue o computador e
aperte o botão ASSIST.
Habilitei o TPM, mas não sei o que ele faz na prática. No entanto,
aparentemente, o computador continuou funcionando normalmente.

O segundo erro que apareceu, que já aparecia junto com o primeiro, mas
que só olhei depois, foi algo na linha de

```
[ 9.115544] ata9: exception Emask 0x0 SAct 0xf SErr 0x0 action 0x10 frozen
[ 9.115550] ata9.00: failed command: READ FPDMA QUEUED
[ 9.115556] ata9.00: cmd 60/04:00:d4:82:85/00:00:1f:00:00/40 tag 0 ncq 2048 in
[ 9.115557] res 40/00:18:d3:82:85/00:00:1f:00:00/40 Emask 0x4 (timeout)
```

Após alguma busca descobri ser um erro de Native Command Queueing com SSDs.
A solução
[[1]](http://steffankarger.nl/2013/12/10/ubuntu-13-10-on-the-sony-vaio-pro-13/)
[[2]](http://www.howtoeverything.net/linux/hardware/ubuntu-freeze-issue-after-ssd-upgrade)
[[3]](https://wiki.archlinux.org/index.php/Solid_State_Drives#Resolving_NCQ_Errors)
foi adicionar `libata.force=noncq` na configuração do grub.
Para isso, resumindo a referência, boot no live,
monte o `/` com bind pro `/dev`, `/sys` e `/proc`, e se tiver separado, o `/boot`
também. Os comandos a seguir fazem isso, supondo `/` instalado no `/dev/sda5`.

```
$ sudo mount /dev/sda5 /mnt
$ sudo mount --bind /dev /mnt/dev
$ sudo mount --bind /sys /mnt/sys
$ sudo mount --bind /proc /mnt/proc
```

Daí, entre nesse sistema com

```
$ sudo chroot /mnt
```

No sistema novo, edite o arquivo `/etc/default/grub`, modificando a linha

```
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
```

para

```
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash libata.force=noncq"
```

e atualize o grub com

```
$ sudo update-grub
```

Saia e desmonte as partições

```
$ exit
$ sudo umount -R /mnt
```

Por fim é só reiniciar e ver se funcionou.

Agora, a parte divertida dessa instalação, que durou quase 3 horas (!) foi em
algum lugar eu li, ou achei ter lido `libdata` no lugar de `libata`, e pareceu
que essa solução não resolveu. E isso não é o pior, eu cheguei a buscar
`libdata.force=noncq`, o google me corrigiu pra `libata.force=noncq`, e eu
cheguei a ler depois o `libata` e achei que era outra opção.

Mas tirando isso, instalações sem problema.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CUTEst Com Matlab]]></title>
            <link>https://abelsiqueira.github.io/blog/2015-01-08-cutest-com-matlab</link>
            <guid>https://abelsiqueira.github.io/blog/2015-01-08-cutest-com-matlab</guid>
            <pubDate>Thu, 08 Jan 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# CUTEst Com Matlab

No meu [vídeo do YouTube](https://www.youtube.com/watch?v=pM7FmOXHyns),
eu ensinei como se faz para instalar o CUTEst. Hoje estendo a instalação
para instalar o MatLab também, mas para uma instalação mais detalhada,
talvez o vídeo seja mais indicado.

Inicialmente instale o Matlab. Não vou entrar em detalhes, mas atente-se a duas
coisas:

- Algumas versões do matlab não colocam o executável num lugar "visível pelo

```
terminal".
Para resolver, usando o bash, adicione o caminho dos executáveis do MATLAB
ao PATH no arquivo `~/.bashrc`.
Por exemplo, adicionando
```

```
PATH=/usr/local/MATLAB/R20XXc/bin:$PATH
```

- Você vai precisar do `mex` (um link para ele é suficiente) no /bin.

```
Para resolver, pode fazer um link a partir do caminho original
```

```
$ sudo ln -s /usr/local/MATLAB/R20XXc/bin/mex /bin/
```

Depois de instalado o Matlab,
vamos instalar o CUTEst. Você precisará do `subversion` instalado (que
disponibiliza o comando `svn`), e do compilador de fortran.
**A versão do compilador de fortran depende da versão do Matlab.**

|  Versão do Matlab   | Versão do compilador |
| :-----------------: | :------------------: |
|   Antes do R2011a   |         g95          |
|   R2011a - R2013a   |     gfortran-4.4     |
| R2013b ou mais novo |     gfortran-4.7     |

Crie ou escolha uma pasta para as biblioteca do cutest.
A nossa será `$HOME/libraries`.
Nessa pasta baixe os repositórios CUTEst usando o subversion.
Siga os passos da [wiki
oficial](http://ccpforge.cse.rl.ac.uk/gf/project/cutest/wiki/),
ou copie os comandos abaixo para um arquivo `baixacutest.sh`.

```
#!/bin/bash
```

```
cmd="svn checkout -q --username anonymous --password "" --non-interactive --no-auth-cache"
url="http://ccpforge.cse.rl.ac.uk/svn/cutest/"
for name in archdefs sifdecode cutest sif
do
echo "Downloading $name"
$cmd $url/$name/trunk ./$name
done
```

Para executar esse arquivo, rode os comandos

```
$ chmod a+x baixacutest.sh
$ ./baixacutest.sh
```

Entre na pasta `$HOME/libraries/archdefs` e rode o comando
`install_optsuite`.
Responda as perguntas para instalar o CUTEst e sua família.

Depois da instalação, o CUTEst soltará várias informações que
você deve guardar no seu `$HOME/.bashrc`. As minhas
informações estão abaixo. Você pode modificar para corresponder
à sua configuração.

```
LIBS=$HOME/libraries
export ARCHDEFS="$LIBS/archdefs"
export SIFDECODE="$LIBS/sifdecode"
export CUTEST="$LIBS/cutest"
export MASTSIF="$LIBS/sif"
export PATH="$CUTEST/bin:$SIFDECODE/bin:$PATH"
export MANPATH="$CUTEST/man:$SIFDECODE/man:$MANPATH"
export MYARCH="pc64.lnx.gfo"
export MYMATLABARCH="pc64.lnx.gfo"
export MYMATLAB="/usr/local/MATLAB/RXXXX/"
```

Para fazer o Matlab funcionar com o CUTEst, você decodifica o arquivo `SIF`
para o format `mex` do matlab. Daí, você tem que abrir o Matlab naquela pasta,
ou inserir o path dessa pasta.
Aí você usa os comandos do cutest para acessar as propriedades do problema.
O primeiro comando que você vai usar é o

```
prob = cutest_setup()
```

Para acessar a função objetivo, você pode usar

```
f = cutest_obj(x)
[f,g] = cutest_obj(x) % já retorna o gradiente também
```

Para acessar o gradiente, você pode usar

```
g = cutest_grad(x)
```

Além disso, existem outras funções que você pode usar.
A lista está no apêndice B do
Technical Report do CUTEst.

Para testar sua instação, você pode copiar o programinha a seguir,
que tenta encontrar o minimizador de uma função através do método
de máxima descida.

```
function [x,fx,k] = steep(x, f, g)

kmax = 1e4;
alpha = 0.5;
eps = 1e-4;

fx = f(x);
gx = g(x);

k = 1;
while norm(gx) > eps
  t = 1;
  while f(x-t*gx) > fx - alpha*t*dot(gx,gx)
    t = t*0.9;
  end
  x = x - t*gx;
  fx = f(x);
  gx = g(x);
  k = k + 1;
  if k > kmax
    return
  end
end
```

Copie esse conteúdo para um arquivo `steep.m`, e abra o Matlab.
No terminal, vá até a pasta em que está esse arquivo e rode:

```
$ cutest2matlab BARD
```

No matlab, vá até a pasta que está esse arquivo e rode

```
prob = cutest_prob();
[sol, fx, k] = steep(prob.x, @(x) cutest_obj(x), @(x) cutest_grad(x))
```

A solução do problema deve ser perto de `(0.08,1.14,2.33)` e `f = 0.0082`.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mudando de HD]]></title>
            <link>https://abelsiqueira.github.io/blog/2014-12-19-mudando-de-hd</link>
            <guid>https://abelsiqueira.github.io/blog/2014-12-19-mudando-de-hd</guid>
            <pubDate>Fri, 19 Dec 2014 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# Mudando de HD

Ontem eu acabei de montar um computador novo.
Esse computador é um upgrade do meu, e o meu passaria para a Kally.
No entanto, eu não gostaria de perder a minha instalação dor Arch,
nem de ficar com o HD antigo, então decidi tentar copiar as partições.

**Nota: Não sei a aplicabilidade destes comandos para outras distribuições.**

**Nota: Você também poderia fazer o que fiz, usando o `dd`, mas eu preferi
evitar.**

Inicialmente, prepare um pendrive (ou sua mídia favorita)
com o iso do Archlinux.
Talvez esses passos possam ser feitos direto da instalação do HD velho,
mas eu preferi não testar.

Faça o boot pelo pendrive.
Verifique que os dois HDs foram identificados e
**atente-se com a numeração sdx do HD**. No meu, o principal era sda, mas quando
eu instalei o outro HD, o novo ficou como sda e o antigo mudou para sdb.
Primeiro particione o HD novo. Eu separei as mesmas partições que o HD antigo,
mas a numeração não foi a mesma, nem o tamanho.
Eu costumo usar 3 partições `/`, `/boot` e `/home`.
Então, depois de particionar o HD novo com a quantidade de partições necessárias
para essas partições, com espaço suficiente para os dados que haviam nas
partições antigas, eu formatei cada partição com o tipo de dado necessário
(usando o `mkfs.ext4`).
Além disso, eu também tinha um swap e queria uma partição compartilhada entre
Windows e Linux, então também "formatei" o swap (`mkswap`) e essa partição
(`mkfs.ntfs`).
Depois disso, eu montei o `/` de cada partição e copiei os dados de uma partição
para outra, com o comando

```
cp -a /mnt/velho/. /mnt/novo/
```

Depois montei o `/home` e `/boot` e copiei o counteúdo de cada um.

```
cp -a /mnt/velho/home/. /mnt/novo/home/
cp -a /mnt/velho/boot/. /mnt/novo/boot/
```

_Nota: (Imagino que seja possível montar tudo, e depois copiar tudo apenas com o
primeiro comando)_.

Nesse momento, o HD já tem os dados do sistema novo. Então, eu segui,
seletivamente, os passos do [guia do
iniciante](https://wiki.archlinux.org/index.php/beginners%27_guide#Generate_an_fstab)
do Archlinux, a partir do "Generate an fstab". Lembre-se de ligar o swap e
montar a partição ntfs, se quiser que eles sejam preparados no boot.
O comando é

```
# genfstab -U -p /mnt/novo > /mnt/novo/etc/fstab
```

Daí, entrei no sistema novo, com

```
# arch-chroot /mnt/novo /bin/bash
```

e pulei para "Create an initial ramdisk environment".
Não sei se era necessário fazer isso,
mas me parecia uma boa coisa a se fazer.

```
# mkinitcpio -p linux
```

Enfim, atualizei o `/boot/syslinux/syslinux.cfg` para refletir a nova posição do
`/`, e rodei

```
# syslinux-install_update -i -a -m
```

Depois, só sair, desmontar e rebootar

```
# exit
# umount -R /mnt/novo /mnt/velho
# reboot
```

Já escrevi isso do computador novo.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Instalação da Impressora no DMAT-UFPR]]></title>
            <link>https://abelsiqueira.github.io/blog/2014-12-16-instalacao-da-impressora-no-dmat-ufpr</link>
            <guid>https://abelsiqueira.github.io/blog/2014-12-16-instalacao-da-impressora-no-dmat-ufpr</guid>
            <pubDate>Tue, 16 Dec 2014 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# Instalação da Impressora no DMAT-UFPR

Hoje tive que instalar a impressora do DMAT da UFPR no meu
[archlinux](https://www.archlinux.org/). Infelizmente o suporte técnico da
universidade não dá suporte para essa distribuição (só Ubuntu).
Existe o suporte ao Windows
([aqui](http://www.cce.ufpr.br/portal/suporte-a-impressao/)),
que foi necessário para eu obter algumas informações sobre a impressora.
Tive algum trabalho para achar as configurações corretas, mas acho que consegui,
e vou deixar explicado aqui caso alguém precise.
Infelizmente não refiz os passos a seguir, porque fui costurando até chegar ao
ponto em que a impressora funcionou. No entanto, vou explicar o que me parece
que fez diferença.

Inicialmente, instale o [CUPS](https://wiki.archlinux.org/index.php/CUPS) e o
[SAMBA](https://wiki.archlinux.org/index.php/Samba) e suba-os com o `systemctl`.
**Talvez seja preciso apenas as partes dos clientes do CUPS e do SAMBA**.

Depois disso, entre na [administração do CUPS](http://localhost:631).
O meu estava em inglês, então vou usar uma tradução livre.
Entre em "adicionar impressora". Entre com `root` e a senha do root nessa
administração (ou configure o usuário com o grupo correto).
Agora selecione "Impressora Windows via SAMBA".

A grande dificuldade de instalar a impressora foi descobrir a porcaria da
conexão. Aparentemente, deve ter o formato

```
smb://[USUARIO]:[SENHA]@[HOST]/[IMPRESSORA]
```

O `[HOST]` eu já tinha porque me foi passado anteriormente, mas a gente também
podia pegar no suporte ao Windows da impressora: `impressao01.ufpr.br`.
O `[USUARIO]` e `[SENHA]` são os seus valores locais (por quê?).
Para obter a `[IMPRESSORA]` tive que entrar no Windows pra pegar, seguindo os
passos do suporte ao Windows. **MAS**, parece que podemos obter a lista usando o
comando

```
smbclient -L impressao01.ufpr.br
```

e colocando nossa senha. Vai ser uma lista, então você pode usar `less` pra ler.
Obtive o nome da impressora que eu queria usar e coloquei no lugar:
`DEPTO.MATEMATICA_SALA.PROFESSORES_EXATAS_POLITECNICO`.

Deposi disso, você precisa passar o ppd. Uma busca na web por `linux MARCA MODELO` retornará um link da [Open Printing](http://www.openprinting.org).
Eu utilizei o modelo C790, mesmo a impressora sendo modelo C792, porque, como
disse, fui costurando um monte de coisas. Baixe o ppd (`directly download PPD`),
e passe-o para o CUPS. Depois disso a impressora deve estar instalado, peça a
impresão de uma página teste e verifique.

Infelizmente as informações são meio dispersas e não cobrem todos os problemas,
principalmente porque eu não sei diferenciar o que é problema e o que deveria de
fato acontecer.

Note que eu não usei o IP da impressora, que **deve** ser uma possibilidade.
]]></content:encoded>
        </item>
    </channel>
</rss>