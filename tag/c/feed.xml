<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Abel Soares Siqueira</title>
        <link>https://abelsiqueira.github.io/tag/c/feed.xml</link>
        <description>RSS feed for abelsiqueira.github.io</description>
        <lastBuildDate>Fri, 23 Dec 2022 23:05:54 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/nuxt-community/feed-module</generator>
        <category>Nuxt.js</category>
        <item>
            <title><![CDATA[10 examples of embedding Julia in C/C++]]></title>
            <link>https://abelsiqueira.github.io/blog/2022-11-03-10-examples-of-embedding-julia-in-c-cpp</link>
            <guid>https://abelsiqueira.github.io/blog/2022-11-03-10-examples-of-embedding-julia-in-c-cpp</guid>
            <pubDate>Thu, 03 Nov 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# 10 examples of embedding Julia in C/C++

I worked on this blog post working for the Netherlands eScience Center.

Check the blog post [here](https://blog.esciencecenter.nl/10-examples-of-embedding-julia-in-c-c-66282477e62c).
]]></content:encoded>
            <enclosure url="https://miro.medium.com/max/1400/1*B3Ij2uByzm7qAj9GWbJ6Nw.webp" length="0" type="image/webp"/>
        </item>
        <item>
            <title><![CDATA[A Study in Julia]]></title>
            <link>https://abelsiqueira.github.io/blog/2015-01-22-a-study-in-julia</link>
            <guid>https://abelsiqueira.github.io/blog/2015-01-22-a-study-in-julia</guid>
            <pubDate>Thu, 22 Jan 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# A Study in Julia

Today I begin a study in [Julia](http://julialang.org/).
This fantastic tool has syntax similar to that of Octave/Matlab,
but is much faster. Furthermore, the interface with functions
made in C and Fortran is much easier to accomplish, and since
most things in computational mathematics are on these languages,
this feature is wonderful.

My intented work is

- make a simple julia and C interface, with auto-compiling

```
and test on GitHub and Travis CI;
```

- develop a nonlinear optimization tool completely in Julia,

```
then improve the slow bits by using C and/or Fortran;
```

- implement/improve the CUTEst interface

```
[[1]](https://github.com/abelsiqueira/ugly),
[[2]](https://github.com/abelsiqueira/CUTEst.jl),
possibly creating a SIF converter.
```

- if things work out, submit to [JuliaOpt](http://www.juliaopt.org/).

My work starts with the [Julia-C
Samples](https://github.com/abelsiqueira/julia-c-sample.git).
If you need me, I might be on `#julia` on IRC/freenode.
]]></content:encoded>
        </item>
    </channel>
</rss>