<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Abel Soares Siqueira</title>
        <link>https://abelsiqueira.github.io/tag/linux/feed.xml</link>
        <description>RSS feed for abelsiqueira.github.io</description>
        <lastBuildDate>Fri, 23 Dec 2022 14:24:34 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/nuxt-community/feed-module</generator>
        <category>Nuxt.js</category>
        <item>
            <title><![CDATA[Installing Gurobi 7 on Linux]]></title>
            <link>https://abelsiqueira.github.io/blog/2017-03-13-installing-gurobi-7-on-linux</link>
            <guid>https://abelsiqueira.github.io/blog/2017-03-13-installing-gurobi-7-on-linux</guid>
            <pubDate>Mon, 13 Mar 2017 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# Installing Gurobi 7 on Linux

_Disclaimer:_ What I did here might work on Windows or OSX, but I give no
guarantee.

_Request by Clóvis Gonzaga._

First, create an account [here](http://www.gurobi.com/) and login.

Secondly, download the appropriate Gurobi version clicking on [_Gurobi
Optimizer_](http://www.gurobi.com/downloads/user/gurobi-optimizer).
In my case, it is Linux 64 bits. Where to download this is optional, but you
have to remember, as we'll use later. I use a folder `packages` on my home
folder.

Third, unpack the file. For linux, you might have a _file-roller_ that allows
clicking and unpacking trivially, but I'll use the command line.
Open a terminal and navigate to the folder where you downloaded the file.

```
tar -zxf gurobi7.0.2_linux64.tar.gz
```

This creates folder `gurobi702`. Inside is folder `linux64`.
Inside are many folders, one being `docs` which include the quick start guide
you might want to read (or not).

Fourth, your system needs to see this installation. On `bash` (the usual
terminal on Ubuntu), you have to open file `.bashrc` on your home folder, to
input some variables.

```
gedit $HOME/.bashrc
```

input the following at the end of the file:

```
export GUROBI_HOME="/FULL/PATH/gurobi702/linux64"
export PATH="${PATH}:${GUROBI_HOME}/bin"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib"
export GRB_LICENSE_FILE="$HOME/gurobi.lic"
```

Notice the `/FULL/PATH` part. This is where you downloaded the package, but it
has to be the full path there. You can use `$HOME` to reference your home
folder. For instance, your `Desktop` is in `$HOME/Desktop`. My packages folder
is `$HOME/packages`.
Also notice the `GRB_LICENSE_FILE` variable. If you intend to put your license
somewhere else, you'll need to change that part.

After that is done you need to either (a) close and reopen the terminal or (b)
input `source $HOME/.bashrc`.

**To know that it's working** enter `grbgetkey` on the terminal. If it's working,
a message like

```
Gurobi license key client (version 7.0.2)
Copyright (c) 2017, Gurobi Optimization, Inc.

Enter the Key Code for the license you are activating
(format is xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx):
```

will appear. Press "CTRL+C" or close the terminal, because you need to get the
license.

## Getting the LICENSE

If you already applied for a license before installing Gurobi, you can go to
[this page](https://user.gurobi.com/download/licenses/current) to see your
available licenses. Otherwise, you need to (a) buy a license; (b) apply for
an academic license or (c) ask for a trial license.
I'm gonna focus on the academic license.

Get your academic license clicking on ["Academic
Licenses"](http://www.gurobi.com/downloads/user/licenses/free-academic).
Accept the conditions and agreements and click "Request License".
Notice that you need to fulfill some requirement to ask for an academic
license, like being a student or professor.

After requesting your license, you will get to a page showing your license
information and a line saying

```
grbgetkey xxxxxxxxxxxxxx
```

Copy all that line and paste on your terminal.

The software will connect to Gurobi and check that it's a valid serial number,
and then will download a file `gurobi.lic`. (Press ENTER or choose a different
folder). If you choose a different folder, remember to change `.bashrc`
accordingly.

To check that it's working, enter

```
gurobi.sh
```

on a terminal. It will a "Gurobi Interactive Shell" message and a prompt
"gurobi> ". It if gives any error, check the Quick User Guide.

## Gurobi with JuMP in Julia

For the advanced students, if you know the [Julia
Language](https://julialang.org), and the [JuMP Modelling
Language](https://github.com/JuliaOpt/JuMP.jl), you should be able to install
Gurobi with the julia command `Pkg.add("Gurobi")` now. Make sure you're in a
terminal with all variables set.

The following examples solves a simple problem with JuMP and Gurobi:

```
using JuMP, Gurobi

m = Model(solver=GurobiSolver(Presolve=0)) # Presolve=0 otherwise it will be trivial
@variable(m, x[1:2] >= 0, Int)
@objective(m, Max, x[1] + 2*x[2])
@constraint(m, x[1] + 10*x[2] <= 30)
@constraint(m, 10*x[1] + x[2] <= 29)
solve(m)
getvalue(x)
```
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[New computer at work]]></title>
            <link>https://abelsiqueira.github.io/blog/2015-11-16-new-computer-at-work</link>
            <guid>https://abelsiqueira.github.io/blog/2015-11-16-new-computer-at-work</guid>
            <pubDate>Mon, 16 Nov 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# New computer at work

I just got a new notebook at work. This is a HP computer, with a AMD a10-4600M
processor, 4GB of RAM and 320GB of HD space.
I have a personal notebook with a similar configuration and my work desktop also
has a similar configuration, so this isn't a great improvement.
However, we're gonna have an additional monitor, so this is good enough.
Also, I'll leave the other one as the always-on screen+irssi computer.
Let's try to use it. Talk to me again in a week.

I'll leave a list of commands I used to install Archlinux on it for future
reference. Maybe someday I'll comment it, but most things here can be found on
[the beginners' guide](https://wiki.archlinux.org/index.php/beginners'_guide).

```
ls /sys/firmware/efi/efivars
ip link set enp1s0 down
netctl start MYCONFIGURATION
mkparted /dev/sda
mklabel gpt
parted /dev/sda
(parted) mkpart primary ext4 1MiB 100MiB
(parted) set 1 boot on
(parted) mkpart primary ext4 100MiB 30GiB
(parted) mkpart primary linux-swap 30GiB 38GiB
(parted) mkpart primary ext4 38GiB 100%
(parted) quit
mkfs.ext4 /dev/sda1
mkfs.ext4 /dev/sda2
mkfs.ext4 /dev/sda4
mkswap /dev/sda3
swapon /dev/sda3
mount /dev/sda2 /mnt
mkdir -p /mnt/{boot,home}
mount /dev/sda1 /mnt/boot
mount /dev/sda4 /mnt/home
cd /etc/pacman.d
cp mirrorlist{,.bk}
#grep Brazil -A 1 mirrorlist.bk | sed '/--/d' > mirrorlist
grep c3sl -B 1 mirrorlist.bk > mirrorlist
pacstrap -i /mnt base base-devel vim screen git
genfstab -U /mnt > /mnt/etc/fstab
arch-chroot /mnt /bin/bash
vim /etc/locale.gen # Uncomment en_US.UTF-8 and others
locate-gen
echo LANG=en_US.UTF-8 > /etc/locale.conf
ln -s /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime
hwclock --systohc --utc
mkinitcpio -p linux
pacman -S syslinux gptfdisk
syslinux-install_update -i -a -m
vim /boot/syslinux/syslinux.cfg
echo myhostname > /etc/hostname
pacman -S iw wpa_supplicant dialog
passwd
exit # From the chroot
cp /etc/netctl/ufpr-static /mnt/etc/netctl/ufpr-static
umount -R /mnt
reboot
```

```
netctl start ufpr-static
pacman -S xorg-server i3-wm i3lock i3status xorg-xinit xorg-twm xterm dmenu
pacman -S xf86-input-synaptics
useradd abel -g users -G wheel -m -s /bin/bash
passwd abel
visudo
# Log as abel
startx # possibly pkill X
# Download b43-firmware and install it
# Rejoice
```
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mudando de HD]]></title>
            <link>https://abelsiqueira.github.io/blog/2014-12-19-mudando-de-hd</link>
            <guid>https://abelsiqueira.github.io/blog/2014-12-19-mudando-de-hd</guid>
            <pubDate>Fri, 19 Dec 2014 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# Mudando de HD

Ontem eu acabei de montar um computador novo.
Esse computador é um upgrade do meu, e o meu passaria para a Kally.
No entanto, eu não gostaria de perder a minha instalação dor Arch,
nem de ficar com o HD antigo, então decidi tentar copiar as partições.

**Nota: Não sei a aplicabilidade destes comandos para outras distribuições.**

**Nota: Você também poderia fazer o que fiz, usando o `dd`, mas eu preferi
evitar.**

Inicialmente, prepare um pendrive (ou sua mídia favorita)
com o iso do Archlinux.
Talvez esses passos possam ser feitos direto da instalação do HD velho,
mas eu preferi não testar.

Faça o boot pelo pendrive.
Verifique que os dois HDs foram identificados e
**atente-se com a numeração sdx do HD**. No meu, o principal era sda, mas quando
eu instalei o outro HD, o novo ficou como sda e o antigo mudou para sdb.
Primeiro particione o HD novo. Eu separei as mesmas partições que o HD antigo,
mas a numeração não foi a mesma, nem o tamanho.
Eu costumo usar 3 partições `/`, `/boot` e `/home`.
Então, depois de particionar o HD novo com a quantidade de partições necessárias
para essas partições, com espaço suficiente para os dados que haviam nas
partições antigas, eu formatei cada partição com o tipo de dado necessário
(usando o `mkfs.ext4`).
Além disso, eu também tinha um swap e queria uma partição compartilhada entre
Windows e Linux, então também "formatei" o swap (`mkswap`) e essa partição
(`mkfs.ntfs`).
Depois disso, eu montei o `/` de cada partição e copiei os dados de uma partição
para outra, com o comando

```
cp -a /mnt/velho/. /mnt/novo/
```

Depois montei o `/home` e `/boot` e copiei o counteúdo de cada um.

```
cp -a /mnt/velho/home/. /mnt/novo/home/
cp -a /mnt/velho/boot/. /mnt/novo/boot/
```

_Nota: (Imagino que seja possível montar tudo, e depois copiar tudo apenas com o
primeiro comando)_.

Nesse momento, o HD já tem os dados do sistema novo. Então, eu segui,
seletivamente, os passos do [guia do
iniciante](https://wiki.archlinux.org/index.php/beginners%27_guide#Generate_an_fstab)
do Archlinux, a partir do "Generate an fstab". Lembre-se de ligar o swap e
montar a partição ntfs, se quiser que eles sejam preparados no boot.
O comando é

```
# genfstab -U -p /mnt/novo > /mnt/novo/etc/fstab
```

Daí, entrei no sistema novo, com

```
# arch-chroot /mnt/novo /bin/bash
```

e pulei para "Create an initial ramdisk environment".
Não sei se era necessário fazer isso,
mas me parecia uma boa coisa a se fazer.

```
# mkinitcpio -p linux
```

Enfim, atualizei o `/boot/syslinux/syslinux.cfg` para refletir a nova posição do
`/`, e rodei

```
# syslinux-install_update -i -a -m
```

Depois, só sair, desmontar e rebootar

```
# exit
# umount -R /mnt/novo /mnt/velho
# reboot
```

Já escrevi isso do computador novo.
]]></content:encoded>
        </item>
    </channel>
</rss>