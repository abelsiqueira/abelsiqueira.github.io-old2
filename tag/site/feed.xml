<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Abel Soares Siqueira</title>
        <link>https://abelsiqueira.github.io/tag/site/feed.xml</link>
        <description>RSS feed for abelsiqueira.github.io</description>
        <lastBuildDate>Tue, 11 Oct 2022 22:59:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/nuxt-community/feed-module</generator>
        <category>Nuxt.js</category>
        <item>
            <title><![CDATA[Migração do site para Franklin.jl]]></title>
            <link>https://abelsiqueira.github.io/blog/2021-06-28-migracao-franklin</link>
            <guid>https://abelsiqueira.github.io/blog/2021-06-28-migracao-franklin</guid>
            <pubDate>Mon, 28 Jun 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# Migração do site para Franklin.jl

Há algum tempo o Jekyll tem me dado trabalho.
Como não sou usuário de Ruby, volta e meia falta alguma coisa na minha instalação e eu passo horas tentando corrigir o problema pra fazer meu site rodar localmente.
Para o CiDAMO, eu considerei o Hugo, já que tem mais suporte e eu não seria a única pessoa a cuidar do site.
Já para meu site pessoal, e o site do [Julia Smooth Optimizers](https://juliasmoothoptimizers.github.io), resolvi usar Franklin, já que eu quero mais é usar Julia mesmo.

## Vantagens

**Franklin.jl é Julia,** então eu tenho mais facilidade em manter e até mesmo de contribuir.
O site é um repositório Julia, então tudo está dentro do esperado.

**Franklin.jl roda Julia,** isto é, dá pra usar Julia pra gerar conteúdo **E** pra fazer tutoriais.
Por exemplo, a lista de posts na página principal do blog é gerada por um script em Julia que lê os diretórios e imprime o markdown para a página.
Por outro lado, os tutoriais do JSO e minhas notas de Cálculo Numérico rodam o código mostrado e a saída é mostrada, então o código está sempre atualizado (ou visivelmente quebrado).

**_Builda_ no GitHub actions.** Então, eu consigo hostear no próprio github. É como GHA é o padrão do Julia, é fácil de achar suporte.

## Desvantagens

**Pode ficar lento,** já que tem que compilar e rodar o código.
Por exemplo, as notas de cálculo numérico levam 40 minutos para rodar, porque tem dezenas de imagens e algumas animações.
Eu tive que fazer uma gambiarra para separar as notas do site. Falo mais sobre isso [aqui](#gambiarra).

**Não é óbvio como manter layouts diferentes.** Por exemplo, se eu quiser ter um layout de `blog` separado de um layout de `page`, não parece óbvio como.
Eu posso colocar `if`s pra separar conteúdo, mas não é tão natural.

**Ainda não está muito estável.** Naturalmente, já que é bem novo, mas dá pra sentir quando se precisa achar alguma coisa específica.

## Gambiarra

Meu site tem 3 partes:

- a base, que consiste principalmente de material estático que eu pretendo atualizar de vez em quando (novos pacotes, pesquisa, orientações, cargos, etc.);
- as notas de cálculo numérico, que depois de pronto deve ver pouca atualização, mas que leva 40 minutos pra compilar no GitHub Actions.
- o blog, que idealmente vê atualizações frequentes, e por isso vou fingir que terá atualizações frequentes.

Se eu coloco todos juntos, então qualquer mudança na base ou no blog leva 40 minutos pra compilar no GitHub Actions por causa das notas de cálculo numérico.

Por outro lado, se eu separo todas, mudanças no CSS, layout, javascript, etc., não são atualizadas.

A solução, simples, é de só manter os arquivos de CSS, layout, javascript, etc., na base e copiá-los no build do GitHub Actions para os outros repositórios.
Além disso, adiciono essas pastas no `.gitignore`, e localmente é só copiá-las para os repositórios que precisam dela.
Aqui a adição ao GitHub actions:

```yaml
- name: Clone abelsiqueira.github.io
  run: |
    wget https://github.com/abelsiqueira/abelsiqueira.github.io/archive/refs/heads/main.zip
    unzip main.zip
    mv abelsiqueira.github.io-main/_layout .
    mv abelsiqueira.github.io-main/_css .
    mv abelsiqueira.github.io-main/_libs .
    rm -rf abelsiqueira.github.io-main main.zip
```

## Conclusão

No fim das contas, sair do Jekyll para o Franklin vai ser uma experiência interessante.
Devo fazer alguns posts atualizados usando as novas capacidades do Franklin, e aí veremos se valeu a pena ou não.
Também queria ter usado a oportunidade para aprender o Hugo, mas uma coisa de cada vez.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Professional site and blog for researchers, professors and students]]></title>
            <link>https://abelsiqueira.github.io/blog/2016-02-13-professional-site-and-blog-for-researchers-professores-and-students</link>
            <guid>https://abelsiqueira.github.io/blog/2016-02-13-professional-site-and-blog-for-researchers-professores-and-students</guid>
            <pubDate>Sat, 13 Feb 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
# Professional site and blog for researchers, professors and students

TL; DR: Make a professional web page, like [mine]({{local_prefix}}/../),
and/or a blog, like [mine]({{local_prefix}}). Use
[Jekyll](https://jekyllrb.com/) and my links:
[work page](http://github.com/abelsiqueira/abelsiqueira.github.io),
[blog page](http://github.com/abelsiqueira/blog).

---

## Summary:

- [Introduction](#introduction)
- [General Information](#general-information)
- [Using my site as a starting point](#using-my-site-as-a-starting-point)
- [Work page - Easy way](#work-page---easy-way)
- [Work page - Hard way](#work-page---hard-way)
- [Blog page - Easy way](#blog-page---easy-way)
- [Blog page - Hard way](#blog-page---hard-way)
- [Both - Hard way](#both---hard-way)

---

### Introduction

We live in the age of information.
It is easier than ever to find someone from another site of the planet, and
contact them.
That said, that is only possible if you are online.

Most of us are online, some way or another. If you google your full name,
chances are you're gonna find some information about you. Possibly a Facebook or
other social media page.
Maybe an old blog, that you forgot to delete.
Possibly things you didn't even know were online, like public documents with
your name, or aggregator sites with your information.
Most of all, you'll probably find things that aren't you.

Suppose someone is trying to find you, but they know only your name, and
possibly occupation. Could they?
Furthermore, could they contact you?
Do you have enough information for they to discern if it is really you?
Do they have to contact you to see your area of expertise? Your projects?
For that end, it is usually a good idea to store some information about youself
in a webpage mantained by yourself.

I'll will show an example of web page management that takes little effort, and
you can use for a personal page and/or a blog.

### General Information

The name of the game is
[Jekyll](https://jekyllrb.com/). This software mantains web pages using
templates, page snippets, and a little programming to make your job easier.
If you enter [this blog](http://github.com/abelsiqueira/blog), you'll see what
it looks like.

The most important folder is `_posts`. This is where you write your posts. The
naming follows the format `YYYY-MM-DD-name-of-the-post.ext`, and you begin the
file with a little header like

```
---
layout: post
title:  Professional site and blog for researchers, professors and students
date:   2016-02-13
name:   2016-02-13-professional-site-and-blog-for-researchers-professores-and-students
---
```

and then you can write the content.
On a clean project, just creating a new file like this is enough for you to have
a new blog post, but now you want to make it look good.
To create a page that is not a post, like my `about` page, you can simply create
a file inside the folder, create a similar header, and write the page. See my
own
[about.md](https://raw.githubusercontent.com/abelsiqueira{{local_prefix}}gh-pages/about.md).

The first thing you'll notice is the `layout` part. In the folder `_layouts`
there are some templates for a site. For instance, the "default" layout is an
html documeent that includes a head.html, then a header.html, then the content,
then a footer.html. These included files reside in the folder `_includes`.

Notice that the content is written between
`{% raw %}{{{% endraw %}` and `{% raw %}}}{% endraw %}`. This is the language
that Jekyll interprets to generate the site. This between
`{% raw %}{%{% endraw %}` and `{% raw %}%}{% endraw %}` are for
commands, and between
`{% raw %}{{{% endraw %}` and `{% raw %}}}{% endraw %}` are for variable input.
For instance, to print the current page's title somewhere in your text, you may
use `{% raw %}{{ page.title }}{% endraw %}`. Not very useful so far, but if want
to put a list of posts in a page you may use

```
{% raw %}{% for pt in site.posts %}
  - {{ pt.date }}: {{ pt.title }}
{% endfor %}{% endraw %}
```

This is only a simple example, and you'll probably want to improve your list to
your liking.
In addition, you can play around with conditionals and filters. For instance,
the navigation bar on my work site is a list of all pages with a title, of the
same language of the one you're in, ordered by an internal value.

To create a clean site and test these fun things, first install Jekyll (follow
the instructions on the site for your system), and then issue the commands in
the terminal

```
jekyll new mysite
cd mysite
jekyll serve -w
```

Your site will be built and available at
[localhost:4000](http://localhost:4000).
To get the site to look good, however, you'll need to edit a few things, like
the layouts for your liking, the css, and so on.
To avoid doing that, you can use my own site as a starting point. I show you how
in the next section.

### Using my site as a starting point

First, let's create a work page. If you don't want one, then jump to the blog
part.
Also, if you know git, and are familiar with GitHub, you can jump a few steps.

#### Work page - Easy way

- Create a [GitHub](http://github.com) account.
- Go to [my github page](http://github.com/abelsiqueira/abelsiqueira.github.io).
- Fork the page, finding the button that says fork and clicking on it.
- In your page, with name http://github.com/youruser/abelsiqueira.github.io, go to

```
settings, and rename the repository to `youruser.github.io`.
```

- Edit the file `_config.yml` and change all pertinent information. Don't leave
  anything with my user.
  **You can edit and create files directly on GitHub, but you can't preview
  your site before publishing. To edit, click on edit, make your modifications
  and then on the bottom of the page click on commit. To create, click on the +
  button, and do similar steps.**

This is sufficient for a site to appear on `http://youruser.github.io` in at
most a few minutes. Now you only need to edit to your liking.
For a multilingual support (default), I suggest you create files with the format
`name.lg.md` where `name` is whatever name you want to give, like `research` and
`lg` is a language prefix. There is no real need to follow this, but it's
cleaner.
Then inside this file, you need to fill

```
---
layout: page
title:  Page Title
key:    name
lang:   lg
order:  Where you want the page in the navigation bar. Lower if leftmost.
permalink: /lg/name/
---
```

See the files `research.br.md` and `research.en.md` for the differences.

It's very important that pages that are translations for each other to have the
same key. Also, for the flag image to appear, you need a file `lg.png` in the
folder `assets`.

I keep a folder `disciplinas` for my teaching files. You may erase it.

If you don't want a blog, you probably want to delete the navigation bar's
`blog`, which is hardcoded. Go to file `_includes/header.html` and find the
lines with `<a class=...Blog</a>` and delete it.

Change the picture.

#### Work page - Hard way

Read the easy way first, but don't do anything yet.
Download my page's source code, either using git or zip.
Modify as you see fit, following the guidelines above.
Test the page with `jekyll serve -w` as I said before, and build it for
publishing with `jekyll build`.
Your page's files will be inside the folder `_site`.
You can publish them however you want. If you have a site at your university,
you can send these files there (probably). For that, you'll have to check with
your IT department.

The advantage of this is that you don't have to use GitHub (or even git) for
anything. The disavantage is that you need to install Jekyll, and you won't have
a default site location.

#### Blog page - Easy way

- Create a [GitHub](http://github.com) account.
- Go to [my github blog page](http://github.com/abelsiqueira/blog).
- Fork the page, finding the button that says fork and clicking on it.
- Edit the file `_config.yml` and change all pertinent information. Don't leave
  anything with my user.
  **You can edit and create files directly on GitHub, but you can't preview
  your site before publishing. To edit, click on edit, make your modifications
  and then on the bottom of the page click on commit. To create, click on the +
  button, and do similar steps.**
- Edit the `about.md` file to be about you.
- Delete all posts in `_posts`, except maybe one to use as a beginning point.
- Write your post.

If you access `http://youruser.github.io{{local_prefix}}`, you'll see your blog. Notice
that, if you haven't created the work page, `http://youruser.github.io` won't
exist, although your blog will.
Also, you won't want the `Work` entry on the navigation bar.
Go to the file `_includes/header.html` and modify the line
`<a class="page-link" href="/">Work</a>`.
If you don't have a work page, then delete it.
If you do, you can change the "/" to your work page url.

#### Blog page - Hard way

Read everything. Do as in the hard part of the work page.

#### Both - Hard way

If you want both, when publishing the content of the blog, remember to publish
the blog pages to a folder `blog`.
]]></content:encoded>
        </item>
    </channel>
</rss>